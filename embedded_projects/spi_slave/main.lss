
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b6  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000016a  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ed  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000cf  00000000  00000000  00000437  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015a  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__vector_10>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	29 d0       	rcall	.+82     	; 0x96 <main>
  44:	36 c0       	rjmp	.+108    	; 0xb2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_10>:
    }
}


ISR (SPI_STC_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  //uint8_t y = SPI_SlaveReceive();
  PORTD = SPDR;
  54:	8f b1       	in	r24, 0x0f	; 15
  56:	82 bb       	out	0x12, r24	; 18

}
  58:	8f 91       	pop	r24
  5a:	0f 90       	pop	r0
  5c:	0f be       	out	0x3f, r0	; 63
  5e:	0f 90       	pop	r0
  60:	1f 90       	pop	r1
  62:	18 95       	reti

00000064 <spi_slave_init>:
#include<avr/interrupt.h>
#include"spi.h"


void spi_slave_init(void){
DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  64:	87 b3       	in	r24, 0x17	; 23
  66:	83 7d       	andi	r24, 0xD3	; 211
  68:	87 bb       	out	0x17, r24	; 23
    DDRB |= (1<<4);                    // MISO as output
  6a:	bc 9a       	sbi	0x17, 4	; 23

    SPCR &= ~(1<<MSTR);                // Set as slave 
  6c:	6c 98       	cbi	0x0d, 4	; 13
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  6e:	8d b1       	in	r24, 0x0d	; 13
  70:	83 60       	ori	r24, 0x03	; 3
  72:	8d b9       	out	0x0d, r24	; 13
    SPCR |= (1<<SPE); 
  74:	6e 9a       	sbi	0x0d, 6	; 13
  76:	08 95       	ret

00000078 <spi_master_init>:

}

void spi_master_init(void){
DDRB |= (1<<2)|(1<<3)|(1<<5);    // SCK, MOSI and SS as outputs
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8c 62       	ori	r24, 0x2C	; 44
  7c:	87 bb       	out	0x17, r24	; 23
    DDRB &= ~(1<<4);                 // MISO as input
  7e:	bc 98       	cbi	0x17, 4	; 23

    SPCR |= (1<<MSTR);               // Set as Master
  80:	6c 9a       	sbi	0x0d, 4	; 13
    SPCR |= (1<<SPR0)|(1<<SPR1);     // divided clock by 128
  82:	8d b1       	in	r24, 0x0d	; 13
  84:	83 60       	ori	r24, 0x03	; 3
  86:	8d b9       	out	0x0d, r24	; 13
    SPCR |= (1<<SPE);                // Enable SPI
  88:	6e 9a       	sbi	0x0d, 6	; 13
  8a:	08 95       	ret

0000008c <spi_send_receive>:
}

unsigned char spi_send_receive(unsigned char data){

SPDR = data;                 // send the data
  8c:	8f b9       	out	0x0f, r24	; 15
        while(!(SPSR & (1<<SPIF)));  // wait untiltransmission is complete
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <spi_send_receive+0x2>
         return SPDR;
  92:	8f b1       	in	r24, 0x0f	; 15
} 
  94:	08 95       	ret

00000096 <main>:
}
*/

volatile unsigned char data;
int main (void)
{DDRD=0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	81 bb       	out	0x11, r24	; 17
    DDRB &= ~((1<<2)|(1<<3)|(1<<5));   // SCK, MOSI and SS as inputs
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	83 7d       	andi	r24, 0xD3	; 211
  9e:	87 bb       	out	0x17, r24	; 23
    DDRB |= (1<<4);                    // MISO as output
  a0:	bc 9a       	sbi	0x17, 4	; 23

    SPCR &= ~(1<<MSTR);                // Set as slave 
  a2:	6c 98       	cbi	0x0d, 4	; 13
    SPCR |= (1<<SPR0)|(1<<SPR1);       // divide clock by 128
  a4:	8d b1       	in	r24, 0x0d	; 13
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	8d b9       	out	0x0d, r24	; 13
    SPCR |=(1<<SPIE);
  aa:	6f 9a       	sbi	0x0d, 7	; 13
    SPCR |= (1<<SPE);                   // Enable SPI
  ac:	6e 9a       	sbi	0x0d, 6	; 13

    sei();
  ae:	78 94       	sei

    while(1)
    {

       // ;
    }
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x1a>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000011a2  00001236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  0000123c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000770  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035e  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c4  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000023a  00000000  00000000  0000223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064d  00000000  00000000  00002476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__fixunssfsi+0x3e>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e2 ea       	ldi	r30, 0xA2	; 162
      fe:	f1 e1       	ldi	r31, 0x11	; 17
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a6 30       	cpi	r26, 0x06	; 6
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a6 e0       	ldi	r26, 0x06	; 6
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	aa 30       	cpi	r26, 0x0A	; 10
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 cc 02 	call	0x598	; 0x598 <main>
     120:	0c 94 cf 08 	jmp	0x119e	; 0x119e <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <arr_char_to_int>:
#include <stdlib.h>
#include <math.h>
#include "keybad.h"
#include "lcd.h"
#define no_digits 10
int arr_char_to_int(unsigned char * arr){
     128:	7f 92       	push	r7
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	00 d0       	rcall	.+0      	; 0x140 <arr_char_to_int+0x18>
     140:	00 d0       	rcall	.+0      	; 0x142 <arr_char_to_int+0x1a>
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	8c 01       	movw	r16, r24
int index=0;
//int length;
int rank;
while(arr[index]!='\0')
     148:	fc 01       	movw	r30, r24
     14a:	5f 01       	movw	r10, r30
     14c:	a0 1a       	sub	r10, r16
     14e:	b1 0a       	sbc	r11, r17
     150:	81 91       	ld	r24, Z+
     152:	81 11       	cpse	r24, r1
     154:	fa cf       	rjmp	.-12     	; 0x14a <arr_char_to_int+0x22>
}
//length=index;
rank=index;
index=0;
int number;
int sum=0;
     156:	e1 2c       	mov	r14, r1
     158:	f1 2c       	mov	r15, r1
while(arr[index]!='\0')
     15a:	f8 01       	movw	r30, r16
     15c:	71 90       	ld	r7, Z+
     15e:	8f 01       	movw	r16, r30
     160:	77 20       	and	r7, r7
     162:	c9 f1       	breq	.+114    	; 0x1d6 <arr_char_to_int+0xae>
{number=arr[index]-'0';
sum+=number*(pow(10,rank-1));
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	a8 1a       	sub	r10, r24
     168:	b1 08       	sbc	r11, r1
     16a:	b5 01       	movw	r22, r10
     16c:	0b 2c       	mov	r0, r11
     16e:	00 0c       	add	r0, r0
     170:	88 0b       	sbc	r24, r24
     172:	99 0b       	sbc	r25, r25
     174:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     178:	9b 01       	movw	r18, r22
     17a:	ac 01       	movw	r20, r24
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	80 e2       	ldi	r24, 0x20	; 32
     182:	91 e4       	ldi	r25, 0x41	; 65
     184:	0e 94 03 06 	call	0xc06	; 0xc06 <pow>
     188:	9b 01       	movw	r18, r22
     18a:	ac 01       	movw	r20, r24
     18c:	b7 01       	movw	r22, r14
     18e:	ff 0c       	add	r15, r15
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	29 83       	std	Y+1, r18	; 0x01
     196:	3a 83       	std	Y+2, r19	; 0x02
     198:	4b 83       	std	Y+3, r20	; 0x03
     19a:	5c 83       	std	Y+4, r21	; 0x04
     19c:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     1a0:	6b 01       	movw	r12, r22
     1a2:	7c 01       	movw	r14, r24
rank=index;
index=0;
int number;
int sum=0;
while(arr[index]!='\0')
{number=arr[index]-'0';
     1a4:	87 2d       	mov	r24, r7
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	c0 97       	sbiw	r24, 0x30	; 48
sum+=number*(pow(10,rank-1));
     1aa:	bc 01       	movw	r22, r24
     1ac:	99 0f       	add	r25, r25
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     1b6:	29 81       	ldd	r18, Y+1	; 0x01
     1b8:	3a 81       	ldd	r19, Y+2	; 0x02
     1ba:	4b 81       	ldd	r20, Y+3	; 0x03
     1bc:	5c 81       	ldd	r21, Y+4	; 0x04
     1be:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	c7 01       	movw	r24, r14
     1c8:	b6 01       	movw	r22, r12
     1ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__addsf3>
     1ce:	0e 94 4c 04 	call	0x898	; 0x898 <__fixsfsi>
     1d2:	7b 01       	movw	r14, r22
     1d4:	c2 cf       	rjmp	.-124    	; 0x15a <arr_char_to_int+0x32>
index++;
rank--;
}
return sum;
}
     1d6:	c7 01       	movw	r24, r14
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	df 90       	pop	r13
     1ee:	cf 90       	pop	r12
     1f0:	bf 90       	pop	r11
     1f2:	af 90       	pop	r10
     1f4:	7f 90       	pop	r7
     1f6:	08 95       	ret

000001f8 <calculate>:

double calculate(unsigned char * first_arg,unsigned char * sec_arg,unsigned char op){
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	1f 92       	push	r1
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	7b 01       	movw	r14, r22
int first=arr_char_to_int(first_arg);
     214:	49 83       	std	Y+1, r20	; 0x01
     216:	0e 94 94 00 	call	0x128	; 0x128 <arr_char_to_int>
     21a:	8c 01       	movw	r16, r24
int second=arr_char_to_int(sec_arg);
     21c:	c7 01       	movw	r24, r14
     21e:	0e 94 94 00 	call	0x128	; 0x128 <arr_char_to_int>
     222:	5c 01       	movw	r10, r24
switch(op){
     224:	49 81       	ldd	r20, Y+1	; 0x01
     226:	4d 32       	cpi	r20, 0x2D	; 45
     228:	01 f1       	breq	.+64     	; 0x26a <calculate+0x72>
     22a:	30 f4       	brcc	.+12     	; 0x238 <calculate+0x40>
     22c:	4b 32       	cpi	r20, 0x2B	; 43
     22e:	e1 f5       	brne	.+120    	; 0x2a8 <calculate+0xb0>
case '+':
  return first+second;
     230:	b8 01       	movw	r22, r16
     232:	68 0f       	add	r22, r24
     234:	79 1f       	adc	r23, r25
     236:	1c c0       	rjmp	.+56     	; 0x270 <calculate+0x78>
}

double calculate(unsigned char * first_arg,unsigned char * sec_arg,unsigned char op){
int first=arr_char_to_int(first_arg);
int second=arr_char_to_int(sec_arg);
switch(op){
     238:	4f 32       	cpi	r20, 0x2F	; 47
     23a:	09 f1       	breq	.+66     	; 0x27e <calculate+0x86>
     23c:	48 37       	cpi	r20, 0x78	; 120
     23e:	a1 f5       	brne	.+104    	; 0x2a8 <calculate+0xb0>
case '+':
  return first+second;
case '-':
  return first-second;
case 'x':
  return (1.00*first)*(1.00*second);
     240:	b8 01       	movw	r22, r16
     242:	11 0f       	add	r17, r17
     244:	88 0b       	sbc	r24, r24
     246:	99 0b       	sbc	r25, r25
     248:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     24c:	6b 01       	movw	r12, r22
     24e:	7c 01       	movw	r14, r24
     250:	b5 01       	movw	r22, r10
     252:	bb 0c       	add	r11, r11
     254:	88 0b       	sbc	r24, r24
     256:	99 0b       	sbc	r25, r25
     258:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     25c:	9b 01       	movw	r18, r22
     25e:	ac 01       	movw	r20, r24
     260:	c7 01       	movw	r24, r14
     262:	b6 01       	movw	r22, r12
     264:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
     268:	23 c0       	rjmp	.+70     	; 0x2b0 <calculate+0xb8>
int second=arr_char_to_int(sec_arg);
switch(op){
case '+':
  return first+second;
case '-':
  return first-second;
     26a:	b8 01       	movw	r22, r16
     26c:	68 1b       	sub	r22, r24
     26e:	79 0b       	sbc	r23, r25
     270:	07 2e       	mov	r0, r23
     272:	00 0c       	add	r0, r0
     274:	88 0b       	sbc	r24, r24
     276:	99 0b       	sbc	r25, r25
     278:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     27c:	19 c0       	rjmp	.+50     	; 0x2b0 <calculate+0xb8>
case 'x':
  return (1.00*first)*(1.00*second);
case '/':
  return (1.00*first)/(1.00*second);
     27e:	b8 01       	movw	r22, r16
     280:	11 0f       	add	r17, r17
     282:	88 0b       	sbc	r24, r24
     284:	99 0b       	sbc	r25, r25
     286:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     28a:	6b 01       	movw	r12, r22
     28c:	7c 01       	movw	r14, r24
     28e:	b5 01       	movw	r22, r10
     290:	bb 0c       	add	r11, r11
     292:	88 0b       	sbc	r24, r24
     294:	99 0b       	sbc	r25, r25
     296:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     29a:	9b 01       	movw	r18, r22
     29c:	ac 01       	movw	r20, r24
     29e:	c7 01       	movw	r24, r14
     2a0:	b6 01       	movw	r22, r12
     2a2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__divsf3>
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <calculate+0xb8>

}
return -5;
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 ea       	ldi	r24, 0xA0	; 160
     2ae:	90 ec       	ldi	r25, 0xC0	; 192
}
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	08 95       	ret

000002c8 <pressed_key>:
#include "keybad.h"


unsigned char pressed_key(void){

KEY_DDR=0x0f;
     2c8:	9f e0       	ldi	r25, 0x0F	; 15
     2ca:	9a b9       	out	0x0a, r25	; 10

KEY_PRT=0xf0;
     2cc:	90 ef       	ldi	r25, 0xF0	; 240
     2ce:	9b b9       	out	0x0b, r25	; 11
unsigned char key;
while(KEY_PIN==0xf0);
     2d0:	99 b1       	in	r25, 0x09	; 9
     2d2:	90 3f       	cpi	r25, 0xF0	; 240
     2d4:	e9 f3       	breq	.-6      	; 0x2d0 <pressed_key+0x8>
if(KEY_PIN!=0xf0){
     2d6:	99 b1       	in	r25, 0x09	; 9
     2d8:	90 3f       	cpi	r25, 0xF0	; 240
     2da:	31 f0       	breq	.+12     	; 0x2e8 <pressed_key+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2dc:	e3 ed       	ldi	r30, 0xD3	; 211
     2de:	f0 e3       	ldi	r31, 0x30	; 48
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <pressed_key+0x18>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <pressed_key+0x1e>
     2e6:	00 00       	nop
_delay_ms(50);
}
if(KEY_PIN !=0xf0){
     2e8:	99 b1       	in	r25, 0x09	; 9
     2ea:	90 3f       	cpi	r25, 0xF0	; 240
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <pressed_key+0x28>
     2ee:	a0 c0       	rjmp	.+320    	; 0x430 <pressed_key+0x168>

//_delay_ms(50);

unsigned char input=KEY_PIN;
     2f0:	99 b1       	in	r25, 0x09	; 9
input=input & 0xf0;
int row=-1;
int col=-1;
if((input & (1<<4))==0)
     2f2:	94 ff       	sbrs	r25, 4
     2f4:	16 c0       	rjmp	.+44     	; 0x322 <pressed_key+0x5a>
  row=0;
else if((input &(1<<5))==0)
     2f6:	95 ff       	sbrs	r25, 5
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <pressed_key+0x60>
  row=1;
else if((input &(1<<6))==0)
     2fa:	96 ff       	sbrs	r25, 6
     2fc:	18 c0       	rjmp	.+48     	; 0x32e <pressed_key+0x66>
  row=2;
else if((input &(1<<7))==0)
     2fe:	97 ff       	sbrs	r25, 7
     300:	19 c0       	rjmp	.+50     	; 0x334 <pressed_key+0x6c>

//_delay_ms(50);

unsigned char input=KEY_PIN;
input=input & 0xf0;
int row=-1;
     302:	2f ef       	ldi	r18, 0xFF	; 255
     304:	3f ef       	ldi	r19, 0xFF	; 255
else if((input &(1<<7))==0)
 row=3;
if(row!=-1)
 PORTC=0xff;

KEY_DDR=0xf0;
     306:	90 ef       	ldi	r25, 0xF0	; 240
     308:	9a b9       	out	0x0a, r25	; 10
KEY_PRT=0x0f;
     30a:	9f e0       	ldi	r25, 0x0F	; 15
     30c:	9b b9       	out	0x0b, r25	; 11

input=KEY_PIN;
     30e:	99 b1       	in	r25, 0x09	; 9
input=input & 0x0f;
if((input & (1<<0))==0)
     310:	90 ff       	sbrs	r25, 0
     312:	15 c0       	rjmp	.+42     	; 0x33e <pressed_key+0x76>
  col=0;
else if((input & (1<<1))==0)
     314:	91 ff       	sbrs	r25, 1
     316:	19 c0       	rjmp	.+50     	; 0x34a <pressed_key+0x82>
  col=1;
else if((input &(1<<2))==0)
     318:	92 ff       	sbrs	r25, 2
     31a:	6f c0       	rjmp	.+222    	; 0x3fa <pressed_key+0x132>
  col=2;
else if((input &(1<<3))==0)
     31c:	93 ff       	sbrs	r25, 3
     31e:	62 c0       	rjmp	.+196    	; 0x3e4 <pressed_key+0x11c>
     320:	66 c0       	rjmp	.+204    	; 0x3ee <pressed_key+0x126>
unsigned char input=KEY_PIN;
input=input & 0xf0;
int row=-1;
int col=-1;
if((input & (1<<4))==0)
  row=0;
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	08 c0       	rjmp	.+16     	; 0x338 <pressed_key+0x70>
else if((input &(1<<5))==0)
  row=1;
     328:	21 e0       	ldi	r18, 0x01	; 1
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	05 c0       	rjmp	.+10     	; 0x338 <pressed_key+0x70>
else if((input &(1<<6))==0)
  row=2;
     32e:	22 e0       	ldi	r18, 0x02	; 2
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	02 c0       	rjmp	.+4      	; 0x338 <pressed_key+0x70>
else if((input &(1<<7))==0)
 row=3;
     334:	23 e0       	ldi	r18, 0x03	; 3
     336:	30 e0       	ldi	r19, 0x00	; 0
if(row!=-1)
 PORTC=0xff;
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	98 b9       	out	0x08, r25	; 8
     33c:	e4 cf       	rjmp	.-56     	; 0x306 <pressed_key+0x3e>
  col=2;
else if((input &(1<<3))==0)
 col=3;


if(row==0 && col==0)
     33e:	21 15       	cp	r18, r1
     340:	31 05       	cpc	r19, r1
     342:	09 f0       	breq	.+2      	; 0x346 <pressed_key+0x7e>
     344:	43 c0       	rjmp	.+134    	; 0x3cc <pressed_key+0x104>
 key='7';
     346:	87 e3       	ldi	r24, 0x37	; 55
     348:	08 95       	ret
  col=2;
else if((input &(1<<3))==0)
 col=3;


if(row==0 && col==0)
     34a:	21 15       	cp	r18, r1
     34c:	31 05       	cpc	r19, r1
     34e:	11 f4       	brne	.+4      	; 0x354 <pressed_key+0x8c>
 key='7';
else if(row==0 && col==1)
key='8';
     350:	88 e3       	ldi	r24, 0x38	; 56
     352:	08 95       	ret
else if(row==0 && col==2)
key='9';
else if(row==0 && col==3)
key='/';
else if(row==1 && col==0)
     354:	21 30       	cpi	r18, 0x01	; 1
     356:	31 05       	cpc	r19, r1
     358:	11 f4       	brne	.+4      	; 0x35e <pressed_key+0x96>
key='4';
else if(row==1 && col==1)
key='5';
     35a:	85 e3       	ldi	r24, 0x35	; 53
     35c:	08 95       	ret
input=KEY_PIN;
input=input & 0x0f;
if((input & (1<<0))==0)
  col=0;
else if((input & (1<<1))==0)
  col=1;
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	50 e0       	ldi	r21, 0x00	; 0
key='5';
else if(row==1 && col==2)
key='6';
else if(row==1 && col==3)
key='x';
else if(row==2 && col==0)
     362:	22 30       	cpi	r18, 0x02	; 2
     364:	31 05       	cpc	r19, r1
     366:	b1 f4       	brne	.+44     	; 0x394 <pressed_key+0xcc>
key='1';
else if(row==2 && col==1)
     368:	41 30       	cpi	r20, 0x01	; 1
     36a:	51 05       	cpc	r21, r1
     36c:	29 f1       	breq	.+74     	; 0x3b8 <pressed_key+0xf0>
key='2';
else if(row==2 && col==2)
     36e:	42 30       	cpi	r20, 0x02	; 2
     370:	51 05       	cpc	r21, r1
     372:	21 f1       	breq	.+72     	; 0x3bc <pressed_key+0xf4>
key='3';
else if(row==2 && col==3)
     374:	43 30       	cpi	r20, 0x03	; 3
     376:	51 05       	cpc	r21, r1
     378:	09 f0       	breq	.+2      	; 0x37c <pressed_key+0xb4>
     37a:	5a c0       	rjmp	.+180    	; 0x430 <pressed_key+0x168>
key='-';
     37c:	8d e2       	ldi	r24, 0x2D	; 45
     37e:	08 95       	ret
else if((input & (1<<1))==0)
  col=1;
else if((input &(1<<2))==0)
  col=2;
else if((input &(1<<3))==0)
 col=3;
     380:	43 e0       	ldi	r20, 0x03	; 3
     382:	50 e0       	ldi	r21, 0x00	; 0
key='8';
else if(row==0 && col==2)
key='9';
else if(row==0 && col==3)
key='/';
else if(row==1 && col==0)
     384:	21 30       	cpi	r18, 0x01	; 1
     386:	31 05       	cpc	r19, r1
     388:	09 f4       	brne	.+2      	; 0x38c <pressed_key+0xc4>
     38a:	3f c0       	rjmp	.+126    	; 0x40a <pressed_key+0x142>
key='5';
else if(row==1 && col==2)
key='6';
else if(row==1 && col==3)
key='x';
else if(row==2 && col==0)
     38c:	22 30       	cpi	r18, 0x02	; 2
     38e:	31 05       	cpc	r19, r1
     390:	09 f4       	brne	.+2      	; 0x394 <pressed_key+0xcc>
     392:	48 c0       	rjmp	.+144    	; 0x424 <pressed_key+0x15c>
key='2';
else if(row==2 && col==2)
key='3';
else if(row==2 && col==3)
key='-';
else if(row==3 && col==0)
     394:	23 30       	cpi	r18, 0x03	; 3
     396:	31 05       	cpc	r19, r1
     398:	09 f0       	breq	.+2      	; 0x39c <pressed_key+0xd4>
     39a:	4a c0       	rjmp	.+148    	; 0x430 <pressed_key+0x168>
     39c:	41 15       	cp	r20, r1
     39e:	51 05       	cpc	r21, r1
     3a0:	79 f0       	breq	.+30     	; 0x3c0 <pressed_key+0xf8>
key='c';
else if(row==3 && col==1)
     3a2:	41 30       	cpi	r20, 0x01	; 1
     3a4:	51 05       	cpc	r21, r1
     3a6:	71 f0       	breq	.+28     	; 0x3c4 <pressed_key+0xfc>
key='0';
else if(row==3 && col==2)
     3a8:	42 30       	cpi	r20, 0x02	; 2
     3aa:	51 05       	cpc	r21, r1
     3ac:	69 f0       	breq	.+26     	; 0x3c8 <pressed_key+0x100>
key='=';
else if(row==3 && col==3)
     3ae:	43 30       	cpi	r20, 0x03	; 3
     3b0:	51 05       	cpc	r21, r1
     3b2:	f1 f5       	brne	.+124    	; 0x430 <pressed_key+0x168>
key='+';
     3b4:	8b e2       	ldi	r24, 0x2B	; 43
     3b6:	08 95       	ret
else if(row==1 && col==3)
key='x';
else if(row==2 && col==0)
key='1';
else if(row==2 && col==1)
key='2';
     3b8:	82 e3       	ldi	r24, 0x32	; 50
     3ba:	08 95       	ret
else if(row==2 && col==2)
key='3';
     3bc:	83 e3       	ldi	r24, 0x33	; 51
     3be:	08 95       	ret
else if(row==2 && col==3)
key='-';
else if(row==3 && col==0)
key='c';
     3c0:	83 e6       	ldi	r24, 0x63	; 99
     3c2:	08 95       	ret
else if(row==3 && col==1)
key='0';
     3c4:	80 e3       	ldi	r24, 0x30	; 48
     3c6:	08 95       	ret
else if(row==3 && col==2)
key='=';
     3c8:	8d e3       	ldi	r24, 0x3D	; 61
     3ca:	08 95       	ret
key='8';
else if(row==0 && col==2)
key='9';
else if(row==0 && col==3)
key='/';
else if(row==1 && col==0)
     3cc:	21 30       	cpi	r18, 0x01	; 1
     3ce:	31 05       	cpc	r19, r1
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <pressed_key+0x10e>
key='4';
     3d2:	84 e3       	ldi	r24, 0x34	; 52
     3d4:	08 95       	ret
KEY_PRT=0x0f;

input=KEY_PIN;
input=input & 0x0f;
if((input & (1<<0))==0)
  col=0;
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
key='5';
else if(row==1 && col==2)
key='6';
else if(row==1 && col==3)
key='x';
else if(row==2 && col==0)
     3da:	22 30       	cpi	r18, 0x02	; 2
     3dc:	31 05       	cpc	r19, r1
     3de:	d1 f6       	brne	.-76     	; 0x394 <pressed_key+0xcc>
key='1';
     3e0:	81 e3       	ldi	r24, 0x31	; 49
     3e2:	08 95       	ret
  col=2;
else if((input &(1<<3))==0)
 col=3;


if(row==0 && col==0)
     3e4:	21 15       	cp	r18, r1
     3e6:	31 05       	cpc	r19, r1
     3e8:	59 f6       	brne	.-106    	; 0x380 <pressed_key+0xb8>
else if(row==0 && col==1)
key='8';
else if(row==0 && col==2)
key='9';
else if(row==0 && col==3)
key='/';
     3ea:	8f e2       	ldi	r24, 0x2F	; 47
     3ec:	08 95       	ret
  col=2;
else if((input &(1<<3))==0)
 col=3;


if(row==0 && col==0)
     3ee:	21 15       	cp	r18, r1
     3f0:	31 05       	cpc	r19, r1
     3f2:	f1 f0       	breq	.+60     	; 0x430 <pressed_key+0x168>
//_delay_ms(50);

unsigned char input=KEY_PIN;
input=input & 0xf0;
int row=-1;
int col=-1;
     3f4:	4f ef       	ldi	r20, 0xFF	; 255
     3f6:	5f ef       	ldi	r21, 0xFF	; 255
     3f8:	c5 cf       	rjmp	.-118    	; 0x384 <pressed_key+0xbc>
  col=2;
else if((input &(1<<3))==0)
 col=3;


if(row==0 && col==0)
     3fa:	21 15       	cp	r18, r1
     3fc:	31 05       	cpc	r19, r1
     3fe:	11 f4       	brne	.+4      	; 0x404 <pressed_key+0x13c>
 key='7';
else if(row==0 && col==1)
key='8';
else if(row==0 && col==2)
key='9';
     400:	89 e3       	ldi	r24, 0x39	; 57
     402:	08 95       	ret
if((input & (1<<0))==0)
  col=0;
else if((input & (1<<1))==0)
  col=1;
else if((input &(1<<2))==0)
  col=2;
     404:	42 e0       	ldi	r20, 0x02	; 2
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	bd cf       	rjmp	.-134    	; 0x384 <pressed_key+0xbc>
key='9';
else if(row==0 && col==3)
key='/';
else if(row==1 && col==0)
key='4';
else if(row==1 && col==1)
     40a:	41 30       	cpi	r20, 0x01	; 1
     40c:	51 05       	cpc	r21, r1
     40e:	09 f4       	brne	.+2      	; 0x412 <pressed_key+0x14a>
     410:	a4 cf       	rjmp	.-184    	; 0x35a <pressed_key+0x92>
key='5';
else if(row==1 && col==2)
     412:	42 30       	cpi	r20, 0x02	; 2
     414:	51 05       	cpc	r21, r1
     416:	51 f0       	breq	.+20     	; 0x42c <pressed_key+0x164>
key='6';
else if(row==1 && col==3)
     418:	43 30       	cpi	r20, 0x03	; 3
     41a:	51 05       	cpc	r21, r1
     41c:	09 f0       	breq	.+2      	; 0x420 <pressed_key+0x158>
     41e:	ba cf       	rjmp	.-140    	; 0x394 <pressed_key+0xcc>
key='x';
     420:	88 e7       	ldi	r24, 0x78	; 120
     422:	08 95       	ret
else if(row==2 && col==0)
     424:	41 15       	cp	r20, r1
     426:	51 05       	cpc	r21, r1
     428:	d9 f2       	breq	.-74     	; 0x3e0 <pressed_key+0x118>
     42a:	9e cf       	rjmp	.-196    	; 0x368 <pressed_key+0xa0>
else if(row==1 && col==0)
key='4';
else if(row==1 && col==1)
key='5';
else if(row==1 && col==2)
key='6';
     42c:	86 e3       	ldi	r24, 0x36	; 54
     42e:	08 95       	ret


return key;


}
     430:	08 95       	ret

00000432 <LCD_cmd>:
return;
}

void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
     432:	85 b9       	out	0x05, r24	; 5
ctrl =(0<<rs)|(0<<rw)|(1<<en);
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	88 b9       	out	0x08, r24	; 8
     438:	89 ef       	ldi	r24, 0xF9	; 249
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <LCD_cmd+0xa>
     440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_cmd+0x10>
     442:	00 00       	nop
_delay_ms(1);
ctrl =(0<<rs)|(0<<rw)|(0<<en);
     444:	18 b8       	out	0x08, r1	; 8
     446:	83 ed       	ldi	r24, 0xD3	; 211
     448:	90 e3       	ldi	r25, 0x30	; 48
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_cmd+0x18>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_cmd+0x1e>
     450:	00 00       	nop
     452:	08 95       	ret

00000454 <init_LCD>:

#include<lcd.h>

void init_LCD(void)
{
LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
     454:	88 e3       	ldi	r24, 0x38	; 56
     456:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     45a:	89 ef       	ldi	r24, 0xF9	; 249
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <init_LCD+0xa>
     462:	00 c0       	rjmp	.+0      	; 0x464 <init_LCD+0x10>
     464:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     46c:	89 ef       	ldi	r24, 0xF9	; 249
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <init_LCD+0x1c>
     474:	00 c0       	rjmp	.+0      	; 0x476 <init_LCD+0x22>
     476:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
     478:	8e e0       	ldi	r24, 0x0E	; 14
     47a:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     47e:	89 ef       	ldi	r24, 0xF9	; 249
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <init_LCD+0x2e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <init_LCD+0x34>
     488:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
     48a:	80 e8       	ldi	r24, 0x80	; 128
     48c:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     490:	89 ef       	ldi	r24, 0xF9	; 249
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <init_LCD+0x40>
     498:	00 c0       	rjmp	.+0      	; 0x49a <init_LCD+0x46>
     49a:	00 00       	nop
     49c:	08 95       	ret

0000049e <LCD_write>:
return;
}

void LCD_write(unsigned char data)
{
LCD_DATA= data;
     49e:	85 b9       	out	0x05, r24	; 5
ctrl = (1<<rs)|(0<<rw)|(1<<en);
     4a0:	85 e0       	ldi	r24, 0x05	; 5
     4a2:	88 b9       	out	0x08, r24	; 8
     4a4:	89 ef       	ldi	r24, 0xF9	; 249
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_write+0xa>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_write+0x10>
     4ae:	00 00       	nop
_delay_ms(1);
ctrl = (1<<rs)|(0<<rw)|(0<<en);
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	88 b9       	out	0x08, r24	; 8
     4b4:	83 ed       	ldi	r24, 0xD3	; 211
     4b6:	90 e3       	ldi	r25, 0x30	; 48
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_write+0x1a>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_write+0x20>
     4be:	00 00       	nop
     4c0:	08 95       	ret

000004c2 <LCD_write_string>:

return ;
}

void LCD_write_string(unsigned char *str)             //store address value of the string in pointer *str
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
     4c8:	89 91       	ld	r24, Y+
     4ca:	88 23       	and	r24, r24
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
     4ce:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_write>
     4d2:	fa cf       	rjmp	.-12     	; 0x4c8 <LCD_write_string+0x6>
i++;
}
return;
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <LCD_write_int>:

void LCD_write_int(int number){
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	18 2f       	mov	r17, r24
     4e8:	09 2f       	mov	r16, r25

int num=number;
     4ea:	68 2f       	mov	r22, r24
     4ec:	79 2f       	mov	r23, r25
int digits=0;
     4ee:	c0 e0       	ldi	r28, 0x00	; 0
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
int index;
while(num>0){
digits++;
num/=10;
     4f2:	ea e0       	ldi	r30, 0x0A	; 10
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(int number){

int num=number;
int digits=0;
int index;
while(num>0){
     4fa:	16 16       	cp	r1, r22
     4fc:	17 06       	cpc	r1, r23
     4fe:	34 f4       	brge	.+12     	; 0x50c <LCD_write_int+0x32>
digits++;
     500:	ec 01       	movw	r28, r24
num/=10;
     502:	cb 01       	movw	r24, r22
     504:	bf 01       	movw	r22, r30
     506:	0e 94 7a 07 	call	0xef4	; 0xef4 <__divmodhi4>
     50a:	f5 cf       	rjmp	.-22     	; 0x4f6 <LCD_write_int+0x1c>
}
index=digits-1;
unsigned char * arr=malloc((digits+1)* sizeof(unsigned char));
     50c:	0e 94 a2 07 	call	0xf44	; 0xf44 <malloc>
     510:	9c 01       	movw	r18, r24
     512:	c8 0f       	add	r28, r24
     514:	d9 1f       	adc	r29, r25
     516:	fe 01       	movw	r30, r28
while(index>=0){
int rem=number%10;
     518:	8a e0       	ldi	r24, 0x0A	; 10
     51a:	e8 2e       	mov	r14, r24
     51c:	f1 2c       	mov	r15, r1
digits++;
num/=10;
}
index=digits-1;
unsigned char * arr=malloc((digits+1)* sizeof(unsigned char));
while(index>=0){
     51e:	e2 17       	cp	r30, r18
     520:	f3 07       	cpc	r31, r19
     522:	59 f0       	breq	.+22     	; 0x53a <LCD_write_int+0x60>
int rem=number%10;
number=number/10;
     524:	81 2f       	mov	r24, r17
     526:	90 2f       	mov	r25, r16
     528:	b7 01       	movw	r22, r14
     52a:	0e 94 7a 07 	call	0xef4	; 0xef4 <__divmodhi4>
     52e:	16 2f       	mov	r17, r22
     530:	07 2f       	mov	r16, r23
arr[index--]=rem+'0';
     532:	90 e3       	ldi	r25, 0x30	; 48
     534:	98 0f       	add	r25, r24
     536:	92 93       	st	-Z, r25
     538:	f2 cf       	rjmp	.-28     	; 0x51e <LCD_write_int+0x44>
}
arr[digits]='\0';
     53a:	18 82       	st	Y, r1
LCD_write_string(arr);
     53c:	cf 01       	movw	r24, r30

}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
int rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
     54a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <LCD_write_string>

0000054e <LCD_write_double>:

}

void LCD_write_double(double number){
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24

int num=(int)number;
     55a:	0e 94 4c 04 	call	0x898	; 0x898 <__fixsfsi>

LCD_write_int(num);
     55e:	cb 01       	movw	r24, r22
     560:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_write_int>
LCD_write('.');
     564:	8e e2       	ldi	r24, 0x2E	; 46
     566:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_write>
int factor=(int)(fmod( number, 1.0 )*100);
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	0e 94 ca 04 	call	0x994	; 0x994 <fmod>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	48 ec       	ldi	r20, 0xC8	; 200
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
     586:	0e 94 4c 04 	call	0x898	; 0x898 <__fixsfsi>
LCD_write_int(factor);
     58a:	cb 01       	movw	r24, r22

}
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
int num=(int)number;

LCD_write_int(num);
LCD_write('.');
int factor=(int)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
     594:	0c 94 6d 02 	jmp	0x4da	; 0x4da <LCD_write_int>

00000598 <main>:

int main(void){
//DDRC=0xff;
LCD_DDR=0xff;
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	84 b9       	out	0x04, r24	; 4
ctrl_DDR=0x07;
     59c:	87 e0       	ldi	r24, 0x07	; 7
     59e:	87 b9       	out	0x07, r24	; 7
init_LCD();
     5a0:	0e 94 2a 02 	call	0x454	; 0x454 <init_LCD>
     5a4:	83 ed       	ldi	r24, 0xD3	; 211
     5a6:	90 e3       	ldi	r25, 0x30	; 48
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x10>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x16>
     5ae:	00 00       	nop
_delay_ms(50);
//LCD_write_string("hello world");
unsigned char * first_arg=malloc(no_digits*sizeof(unsigned char));   
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 a2 07 	call	0xf44	; 0xf44 <malloc>
     5b8:	6c 01       	movw	r12, r24
unsigned char * sec_arg=malloc(no_digits*sizeof(unsigned char));   
     5ba:	8a e0       	ldi	r24, 0x0A	; 10
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 a2 07 	call	0xf44	; 0xf44 <malloc>
     5c2:	5c 01       	movw	r10, r24
int index_first=0;
int index_sec=0;
int flag=0;
     5c4:	e1 2c       	mov	r14, r1
     5c6:	f1 2c       	mov	r15, r1
_delay_ms(50);
//LCD_write_string("hello world");
unsigned char * first_arg=malloc(no_digits*sizeof(unsigned char));   
unsigned char * sec_arg=malloc(no_digits*sizeof(unsigned char));   
int index_first=0;
int index_sec=0;
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	10 e0       	ldi	r17, 0x00	; 0
init_LCD();
_delay_ms(50);
//LCD_write_string("hello world");
unsigned char * first_arg=malloc(no_digits*sizeof(unsigned char));   
unsigned char * sec_arg=malloc(no_digits*sizeof(unsigned char));   
int index_first=0;
     5cc:	c0 e0       	ldi	r28, 0x00	; 0
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
int flag=0;
unsigned char op;
double result;
while(1){

unsigned char key= pressed_key();
     5d0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pressed_key>
     5d4:	98 2f       	mov	r25, r24
if((key !='+') &&(key!='-')&&(key !='x') &&(key!='=')&&(key !='/') && (key!='c')){
     5d6:	8b 7f       	andi	r24, 0xFB	; 251
     5d8:	8b 32       	cpi	r24, 0x2B	; 43
     5da:	21 f1       	breq	.+72     	; 0x624 <main+0x8c>
     5dc:	89 2f       	mov	r24, r25
     5de:	8f 7e       	andi	r24, 0xEF	; 239
     5e0:	8d 32       	cpi	r24, 0x2D	; 45
     5e2:	01 f1       	breq	.+64     	; 0x624 <main+0x8c>
     5e4:	98 37       	cpi	r25, 0x78	; 120
     5e6:	f1 f0       	breq	.+60     	; 0x624 <main+0x8c>
     5e8:	93 36       	cpi	r25, 0x63	; 99
     5ea:	e1 f0       	breq	.+56     	; 0x624 <main+0x8c>
  if(flag==0){
     5ec:	e1 14       	cp	r14, r1
     5ee:	f1 04       	cpc	r15, r1
     5f0:	61 f4       	brne	.+24     	; 0x60a <main+0x72>
    first_arg[index_first++]=key;
     5f2:	9e 01       	movw	r18, r28
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	cc 0d       	add	r28, r12
     5fa:	dd 1d       	adc	r29, r13
     5fc:	98 83       	st	Y, r25
    first_arg[index_first]='\0';
     5fe:	f6 01       	movw	r30, r12
     600:	e2 0f       	add	r30, r18
     602:	f3 1f       	adc	r31, r19
     604:	10 82       	st	Z, r1
while(1){

unsigned char key= pressed_key();
if((key !='+') &&(key!='-')&&(key !='x') &&(key!='=')&&(key !='/') && (key!='c')){
  if(flag==0){
    first_arg[index_first++]=key;
     606:	e9 01       	movw	r28, r18
     608:	42 c0       	rjmp	.+132    	; 0x68e <main+0xf6>
    first_arg[index_first]='\0';
             }
  else{
   sec_arg[index_sec++]=key;
     60a:	98 01       	movw	r18, r16
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	f5 01       	movw	r30, r10
     612:	e0 0f       	add	r30, r16
     614:	f1 1f       	adc	r31, r17
     616:	90 83       	st	Z, r25
   sec_arg[index_sec]='\0';
     618:	f5 01       	movw	r30, r10
     61a:	e2 0f       	add	r30, r18
     61c:	f3 1f       	adc	r31, r19
     61e:	10 82       	st	Z, r1
  if(flag==0){
    first_arg[index_first++]=key;
    first_arg[index_first]='\0';
             }
  else{
   sec_arg[index_sec++]=key;
     620:	89 01       	movw	r16, r18
     622:	35 c0       	rjmp	.+106    	; 0x68e <main+0xf6>
   sec_arg[index_sec]='\0';
      }
         }
else if((key=='+')||(key=='*')||(key=='-')||(key=='x')||(key=='/')){
     624:	86 ed       	ldi	r24, 0xD6	; 214
     626:	89 0f       	add	r24, r25
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	08 f4       	brcc	.+2      	; 0x62e <main+0x96>
     62c:	4c c0       	rjmp	.+152    	; 0x6c6 <main+0x12e>
     62e:	9d 32       	cpi	r25, 0x2D	; 45
     630:	09 f4       	brne	.+2      	; 0x634 <main+0x9c>
     632:	40 c0       	rjmp	.+128    	; 0x6b4 <main+0x11c>
     634:	98 37       	cpi	r25, 0x78	; 120
     636:	09 f4       	brne	.+2      	; 0x63a <main+0xa2>
     638:	40 c0       	rjmp	.+128    	; 0x6ba <main+0x122>
     63a:	9f 32       	cpi	r25, 0x2F	; 47
     63c:	09 f4       	brne	.+2      	; 0x640 <main+0xa8>
     63e:	40 c0       	rjmp	.+128    	; 0x6c0 <main+0x128>
op=key;
flag=1;
}
else if(key=='=') {
     640:	9d 33       	cpi	r25, 0x3D	; 61
     642:	f9 f4       	brne	.+62     	; 0x682 <main+0xea>
result=calculate(first_arg,sec_arg,op);
     644:	49 2d       	mov	r20, r9
     646:	b5 01       	movw	r22, r10
     648:	c6 01       	movw	r24, r12
     64a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <calculate>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
//LCD_cmd(0x38);
LCD_write(key);
     652:	8d e3       	ldi	r24, 0x3D	; 61
     654:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_write>
//LCD_cmd(0x10);
if(result<0){
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	c3 01       	movw	r24, r6
     660:	b2 01       	movw	r22, r4
     662:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__cmpsf2>
     666:	87 ff       	sbrs	r24, 7
     668:	07 c0       	rjmp	.+14     	; 0x678 <main+0xe0>
LCD_write('-');
     66a:	8d e2       	ldi	r24, 0x2D	; 45
     66c:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_write>
result*=-1;
     670:	77 fa       	bst	r7, 7
     672:	70 94       	com	r7
     674:	77 f8       	bld	r7, 7
     676:	70 94       	com	r7
}
//result*=-1;
//LCD_write_int(result);
LCD_write_double(result);
     678:	c3 01       	movw	r24, r6
     67a:	b2 01       	movw	r22, r4
     67c:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_write_double>
     680:	0f c0       	rjmp	.+30     	; 0x6a0 <main+0x108>
_delay_ms(2000);
}
else if(key=='c') {
     682:	93 36       	cpi	r25, 0x63	; 99
     684:	21 f4       	brne	.+8      	; 0x68e <main+0xf6>
LCD_cmd(0x01);
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     68c:	9d cf       	rjmp	.-198    	; 0x5c8 <main+0x30>
index_first=0;
index_sec=0;
}
if(key!='c' && key!='='){
     68e:	9d 33       	cpi	r25, 0x3D	; 61
     690:	09 f4       	brne	.+2      	; 0x694 <main+0xfc>
     692:	9e cf       	rjmp	.-196    	; 0x5d0 <main+0x38>
LCD_write(key);
     694:	89 2f       	mov	r24, r25
     696:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_write>
LCD_cmd(0x10);
     69a:	80 e1       	ldi	r24, 0x10	; 16
     69c:	0e 94 19 02 	call	0x432	; 0x432 <LCD_cmd>
     6a0:	9f e7       	ldi	r25, 0x7F	; 127
     6a2:	2a e1       	ldi	r18, 0x1A	; 26
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	91 50       	subi	r25, 0x01	; 1
     6a8:	20 40       	sbci	r18, 0x00	; 0
     6aa:	80 40       	sbci	r24, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x10e>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x118>
     6b0:	00 00       	nop
     6b2:	8e cf       	rjmp	.-228    	; 0x5d0 <main+0x38>
     6b4:	4d e2       	ldi	r20, 0x2D	; 45
     6b6:	94 2e       	mov	r9, r20
     6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <main+0x130>
     6ba:	38 e7       	ldi	r19, 0x78	; 120
     6bc:	93 2e       	mov	r9, r19
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <main+0x130>
     6c0:	2f e2       	ldi	r18, 0x2F	; 47
     6c2:	92 2e       	mov	r9, r18
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <main+0x130>
     6c6:	99 2e       	mov	r9, r25
   sec_arg[index_sec]='\0';
      }
         }
else if((key=='+')||(key=='*')||(key=='-')||(key=='x')||(key=='/')){
op=key;
flag=1;
     6c8:	ee 24       	eor	r14, r14
     6ca:	e3 94       	inc	r14
     6cc:	f1 2c       	mov	r15, r1
     6ce:	e2 cf       	rjmp	.-60     	; 0x694 <main+0xfc>

000006d0 <__subsf3>:
     6d0:	50 58       	subi	r21, 0x80	; 128

000006d2 <__addsf3>:
     6d2:	bb 27       	eor	r27, r27
     6d4:	aa 27       	eor	r26, r26
     6d6:	0e 94 80 03 	call	0x700	; 0x700 <__addsf3x>
     6da:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
     6de:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
     6e2:	38 f0       	brcs	.+14     	; 0x6f2 <__addsf3+0x20>
     6e4:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
     6e8:	20 f0       	brcs	.+8      	; 0x6f2 <__addsf3+0x20>
     6ea:	39 f4       	brne	.+14     	; 0x6fa <__addsf3+0x28>
     6ec:	9f 3f       	cpi	r25, 0xFF	; 255
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <__addsf3+0x24>
     6f0:	26 f4       	brtc	.+8      	; 0x6fa <__addsf3+0x28>
     6f2:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
     6f6:	0e f4       	brtc	.+2      	; 0x6fa <__addsf3+0x28>
     6f8:	e0 95       	com	r30
     6fa:	e7 fb       	bst	r30, 7
     6fc:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>

00000700 <__addsf3x>:
     700:	e9 2f       	mov	r30, r25
     702:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
     706:	58 f3       	brcs	.-42     	; 0x6de <__addsf3+0xc>
     708:	ba 17       	cp	r27, r26
     70a:	62 07       	cpc	r22, r18
     70c:	73 07       	cpc	r23, r19
     70e:	84 07       	cpc	r24, r20
     710:	95 07       	cpc	r25, r21
     712:	20 f0       	brcs	.+8      	; 0x71c <__addsf3x+0x1c>
     714:	79 f4       	brne	.+30     	; 0x734 <__addsf3x+0x34>
     716:	a6 f5       	brtc	.+104    	; 0x780 <__addsf3x+0x80>
     718:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
     71c:	0e f4       	brtc	.+2      	; 0x720 <__addsf3x+0x20>
     71e:	e0 95       	com	r30
     720:	0b 2e       	mov	r0, r27
     722:	ba 2f       	mov	r27, r26
     724:	a0 2d       	mov	r26, r0
     726:	0b 01       	movw	r0, r22
     728:	b9 01       	movw	r22, r18
     72a:	90 01       	movw	r18, r0
     72c:	0c 01       	movw	r0, r24
     72e:	ca 01       	movw	r24, r20
     730:	a0 01       	movw	r20, r0
     732:	11 24       	eor	r1, r1
     734:	ff 27       	eor	r31, r31
     736:	59 1b       	sub	r21, r25
     738:	99 f0       	breq	.+38     	; 0x760 <__addsf3x+0x60>
     73a:	59 3f       	cpi	r21, 0xF9	; 249
     73c:	50 f4       	brcc	.+20     	; 0x752 <__addsf3x+0x52>
     73e:	50 3e       	cpi	r21, 0xE0	; 224
     740:	68 f1       	brcs	.+90     	; 0x79c <__addsf3x+0x9c>
     742:	1a 16       	cp	r1, r26
     744:	f0 40       	sbci	r31, 0x00	; 0
     746:	a2 2f       	mov	r26, r18
     748:	23 2f       	mov	r18, r19
     74a:	34 2f       	mov	r19, r20
     74c:	44 27       	eor	r20, r20
     74e:	58 5f       	subi	r21, 0xF8	; 248
     750:	f3 cf       	rjmp	.-26     	; 0x738 <__addsf3x+0x38>
     752:	46 95       	lsr	r20
     754:	37 95       	ror	r19
     756:	27 95       	ror	r18
     758:	a7 95       	ror	r26
     75a:	f0 40       	sbci	r31, 0x00	; 0
     75c:	53 95       	inc	r21
     75e:	c9 f7       	brne	.-14     	; 0x752 <__addsf3x+0x52>
     760:	7e f4       	brtc	.+30     	; 0x780 <__addsf3x+0x80>
     762:	1f 16       	cp	r1, r31
     764:	ba 0b       	sbc	r27, r26
     766:	62 0b       	sbc	r22, r18
     768:	73 0b       	sbc	r23, r19
     76a:	84 0b       	sbc	r24, r20
     76c:	ba f0       	brmi	.+46     	; 0x79c <__addsf3x+0x9c>
     76e:	91 50       	subi	r25, 0x01	; 1
     770:	a1 f0       	breq	.+40     	; 0x79a <__addsf3x+0x9a>
     772:	ff 0f       	add	r31, r31
     774:	bb 1f       	adc	r27, r27
     776:	66 1f       	adc	r22, r22
     778:	77 1f       	adc	r23, r23
     77a:	88 1f       	adc	r24, r24
     77c:	c2 f7       	brpl	.-16     	; 0x76e <__addsf3x+0x6e>
     77e:	0e c0       	rjmp	.+28     	; 0x79c <__addsf3x+0x9c>
     780:	ba 0f       	add	r27, r26
     782:	62 1f       	adc	r22, r18
     784:	73 1f       	adc	r23, r19
     786:	84 1f       	adc	r24, r20
     788:	48 f4       	brcc	.+18     	; 0x79c <__addsf3x+0x9c>
     78a:	87 95       	ror	r24
     78c:	77 95       	ror	r23
     78e:	67 95       	ror	r22
     790:	b7 95       	ror	r27
     792:	f7 95       	ror	r31
     794:	9e 3f       	cpi	r25, 0xFE	; 254
     796:	08 f0       	brcs	.+2      	; 0x79a <__addsf3x+0x9a>
     798:	b0 cf       	rjmp	.-160    	; 0x6fa <__addsf3+0x28>
     79a:	93 95       	inc	r25
     79c:	88 0f       	add	r24, r24
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <__addsf3x+0xa2>
     7a0:	99 27       	eor	r25, r25
     7a2:	ee 0f       	add	r30, r30
     7a4:	97 95       	ror	r25
     7a6:	87 95       	ror	r24
     7a8:	08 95       	ret

000007aa <__cmpsf2>:
     7aa:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_cmp>
     7ae:	08 f4       	brcc	.+2      	; 0x7b2 <__cmpsf2+0x8>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret

000007b4 <__divsf3>:
     7b4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__divsf3x>
     7b8:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
     7bc:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
     7c0:	58 f0       	brcs	.+22     	; 0x7d8 <__divsf3+0x24>
     7c2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
     7c6:	40 f0       	brcs	.+16     	; 0x7d8 <__divsf3+0x24>
     7c8:	29 f4       	brne	.+10     	; 0x7d4 <__divsf3+0x20>
     7ca:	5f 3f       	cpi	r21, 0xFF	; 255
     7cc:	29 f0       	breq	.+10     	; 0x7d8 <__divsf3+0x24>
     7ce:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     7d2:	51 11       	cpse	r21, r1
     7d4:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
     7d8:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>

000007dc <__divsf3x>:
     7dc:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
     7e0:	68 f3       	brcs	.-38     	; 0x7bc <__divsf3+0x8>

000007e2 <__divsf3_pse>:
     7e2:	99 23       	and	r25, r25
     7e4:	b1 f3       	breq	.-20     	; 0x7d2 <__divsf3+0x1e>
     7e6:	55 23       	and	r21, r21
     7e8:	91 f3       	breq	.-28     	; 0x7ce <__divsf3+0x1a>
     7ea:	95 1b       	sub	r25, r21
     7ec:	55 0b       	sbc	r21, r21
     7ee:	bb 27       	eor	r27, r27
     7f0:	aa 27       	eor	r26, r26
     7f2:	62 17       	cp	r22, r18
     7f4:	73 07       	cpc	r23, r19
     7f6:	84 07       	cpc	r24, r20
     7f8:	38 f0       	brcs	.+14     	; 0x808 <__divsf3_pse+0x26>
     7fa:	9f 5f       	subi	r25, 0xFF	; 255
     7fc:	5f 4f       	sbci	r21, 0xFF	; 255
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
     802:	44 1f       	adc	r20, r20
     804:	aa 1f       	adc	r26, r26
     806:	a9 f3       	breq	.-22     	; 0x7f2 <__divsf3_pse+0x10>
     808:	35 d0       	rcall	.+106    	; 0x874 <__divsf3_pse+0x92>
     80a:	0e 2e       	mov	r0, r30
     80c:	3a f0       	brmi	.+14     	; 0x81c <__divsf3_pse+0x3a>
     80e:	e0 e8       	ldi	r30, 0x80	; 128
     810:	32 d0       	rcall	.+100    	; 0x876 <__divsf3_pse+0x94>
     812:	91 50       	subi	r25, 0x01	; 1
     814:	50 40       	sbci	r21, 0x00	; 0
     816:	e6 95       	lsr	r30
     818:	00 1c       	adc	r0, r0
     81a:	ca f7       	brpl	.-14     	; 0x80e <__divsf3_pse+0x2c>
     81c:	2b d0       	rcall	.+86     	; 0x874 <__divsf3_pse+0x92>
     81e:	fe 2f       	mov	r31, r30
     820:	29 d0       	rcall	.+82     	; 0x874 <__divsf3_pse+0x92>
     822:	66 0f       	add	r22, r22
     824:	77 1f       	adc	r23, r23
     826:	88 1f       	adc	r24, r24
     828:	bb 1f       	adc	r27, r27
     82a:	26 17       	cp	r18, r22
     82c:	37 07       	cpc	r19, r23
     82e:	48 07       	cpc	r20, r24
     830:	ab 07       	cpc	r26, r27
     832:	b0 e8       	ldi	r27, 0x80	; 128
     834:	09 f0       	breq	.+2      	; 0x838 <__divsf3_pse+0x56>
     836:	bb 0b       	sbc	r27, r27
     838:	80 2d       	mov	r24, r0
     83a:	bf 01       	movw	r22, r30
     83c:	ff 27       	eor	r31, r31
     83e:	93 58       	subi	r25, 0x83	; 131
     840:	5f 4f       	sbci	r21, 0xFF	; 255
     842:	3a f0       	brmi	.+14     	; 0x852 <__divsf3_pse+0x70>
     844:	9e 3f       	cpi	r25, 0xFE	; 254
     846:	51 05       	cpc	r21, r1
     848:	78 f0       	brcs	.+30     	; 0x868 <__divsf3_pse+0x86>
     84a:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     84e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
     852:	5f 3f       	cpi	r21, 0xFF	; 255
     854:	e4 f3       	brlt	.-8      	; 0x84e <__divsf3_pse+0x6c>
     856:	98 3e       	cpi	r25, 0xE8	; 232
     858:	d4 f3       	brlt	.-12     	; 0x84e <__divsf3_pse+0x6c>
     85a:	86 95       	lsr	r24
     85c:	77 95       	ror	r23
     85e:	67 95       	ror	r22
     860:	b7 95       	ror	r27
     862:	f7 95       	ror	r31
     864:	9f 5f       	subi	r25, 0xFF	; 255
     866:	c9 f7       	brne	.-14     	; 0x85a <__divsf3_pse+0x78>
     868:	88 0f       	add	r24, r24
     86a:	91 1d       	adc	r25, r1
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	97 f9       	bld	r25, 7
     872:	08 95       	ret
     874:	e1 e0       	ldi	r30, 0x01	; 1
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	88 1f       	adc	r24, r24
     87c:	bb 1f       	adc	r27, r27
     87e:	62 17       	cp	r22, r18
     880:	73 07       	cpc	r23, r19
     882:	84 07       	cpc	r24, r20
     884:	ba 07       	cpc	r27, r26
     886:	20 f0       	brcs	.+8      	; 0x890 <__divsf3_pse+0xae>
     888:	62 1b       	sub	r22, r18
     88a:	73 0b       	sbc	r23, r19
     88c:	84 0b       	sbc	r24, r20
     88e:	ba 0b       	sbc	r27, r26
     890:	ee 1f       	adc	r30, r30
     892:	88 f7       	brcc	.-30     	; 0x876 <__divsf3_pse+0x94>
     894:	e0 95       	com	r30
     896:	08 95       	ret

00000898 <__fixsfsi>:
     898:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
     89c:	68 94       	set
     89e:	b1 11       	cpse	r27, r1
     8a0:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
     8a4:	08 95       	ret

000008a6 <__fixunssfsi>:
     8a6:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
     8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x28>
     8ac:	9f 57       	subi	r25, 0x7F	; 127
     8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fixunssfsi+0x30>
     8b0:	b9 2f       	mov	r27, r25
     8b2:	99 27       	eor	r25, r25
     8b4:	b7 51       	subi	r27, 0x17	; 23
     8b6:	b0 f0       	brcs	.+44     	; 0x8e4 <__fixunssfsi+0x3e>
     8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__fixunssfsi+0x4c>
     8ba:	66 0f       	add	r22, r22
     8bc:	77 1f       	adc	r23, r23
     8be:	88 1f       	adc	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x24>
     8c4:	ba 95       	dec	r27
     8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x14>
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__fixunssfsi+0x4c>
     8ca:	b1 30       	cpi	r27, 0x01	; 1
     8cc:	91 f0       	breq	.+36     	; 0x8f2 <__fixunssfsi+0x4c>
     8ce:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_zero>
     8d2:	b1 e0       	ldi	r27, 0x01	; 1
     8d4:	08 95       	ret
     8d6:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
     8da:	67 2f       	mov	r22, r23
     8dc:	78 2f       	mov	r23, r24
     8de:	88 27       	eor	r24, r24
     8e0:	b8 5f       	subi	r27, 0xF8	; 248
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <__fixunssfsi+0x4c>
     8e4:	b9 3f       	cpi	r27, 0xF9	; 249
     8e6:	cc f3       	brlt	.-14     	; 0x8da <__fixunssfsi+0x34>
     8e8:	86 95       	lsr	r24
     8ea:	77 95       	ror	r23
     8ec:	67 95       	ror	r22
     8ee:	b3 95       	inc	r27
     8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__fixunssfsi+0x42>
     8f2:	3e f4       	brtc	.+14     	; 0x902 <__stack+0x3>
     8f4:	90 95       	com	r25
     8f6:	80 95       	com	r24
     8f8:	70 95       	com	r23
     8fa:	61 95       	neg	r22
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	8f 4f       	sbci	r24, 0xFF	; 255
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	08 95       	ret

00000904 <__floatunsisf>:
     904:	e8 94       	clt
     906:	09 c0       	rjmp	.+18     	; 0x91a <__floatsisf+0x12>

00000908 <__floatsisf>:
     908:	97 fb       	bst	r25, 7
     90a:	3e f4       	brtc	.+14     	; 0x91a <__floatsisf+0x12>
     90c:	90 95       	com	r25
     90e:	80 95       	com	r24
     910:	70 95       	com	r23
     912:	61 95       	neg	r22
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	8f 4f       	sbci	r24, 0xFF	; 255
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	99 23       	and	r25, r25
     91c:	a9 f0       	breq	.+42     	; 0x948 <__floatsisf+0x40>
     91e:	f9 2f       	mov	r31, r25
     920:	96 e9       	ldi	r25, 0x96	; 150
     922:	bb 27       	eor	r27, r27
     924:	93 95       	inc	r25
     926:	f6 95       	lsr	r31
     928:	87 95       	ror	r24
     92a:	77 95       	ror	r23
     92c:	67 95       	ror	r22
     92e:	b7 95       	ror	r27
     930:	f1 11       	cpse	r31, r1
     932:	f8 cf       	rjmp	.-16     	; 0x924 <__floatsisf+0x1c>
     934:	fa f4       	brpl	.+62     	; 0x974 <__floatsisf+0x6c>
     936:	bb 0f       	add	r27, r27
     938:	11 f4       	brne	.+4      	; 0x93e <__floatsisf+0x36>
     93a:	60 ff       	sbrs	r22, 0
     93c:	1b c0       	rjmp	.+54     	; 0x974 <__floatsisf+0x6c>
     93e:	6f 5f       	subi	r22, 0xFF	; 255
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	8f 4f       	sbci	r24, 0xFF	; 255
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	16 c0       	rjmp	.+44     	; 0x974 <__floatsisf+0x6c>
     948:	88 23       	and	r24, r24
     94a:	11 f0       	breq	.+4      	; 0x950 <__floatsisf+0x48>
     94c:	96 e9       	ldi	r25, 0x96	; 150
     94e:	11 c0       	rjmp	.+34     	; 0x972 <__floatsisf+0x6a>
     950:	77 23       	and	r23, r23
     952:	21 f0       	breq	.+8      	; 0x95c <__floatsisf+0x54>
     954:	9e e8       	ldi	r25, 0x8E	; 142
     956:	87 2f       	mov	r24, r23
     958:	76 2f       	mov	r23, r22
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__floatsisf+0x5e>
     95c:	66 23       	and	r22, r22
     95e:	71 f0       	breq	.+28     	; 0x97c <__floatsisf+0x74>
     960:	96 e8       	ldi	r25, 0x86	; 134
     962:	86 2f       	mov	r24, r22
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	2a f0       	brmi	.+10     	; 0x974 <__floatsisf+0x6c>
     96a:	9a 95       	dec	r25
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	88 1f       	adc	r24, r24
     972:	da f7       	brpl	.-10     	; 0x96a <__floatsisf+0x62>
     974:	88 0f       	add	r24, r24
     976:	96 95       	lsr	r25
     978:	87 95       	ror	r24
     97a:	97 f9       	bld	r25, 7
     97c:	08 95       	ret
     97e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
     982:	20 f0       	brcs	.+8      	; 0x98c <__floatsisf+0x84>
     984:	19 f0       	breq	.+6      	; 0x98c <__floatsisf+0x84>
     986:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
     98a:	50 f4       	brcc	.+20     	; 0x9a0 <fmod+0xc>
     98c:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
     990:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>

00000994 <fmod>:
     994:	e9 2f       	mov	r30, r25
     996:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
     99a:	88 f3       	brcs	.-30     	; 0x97e <__floatsisf+0x76>
     99c:	55 23       	and	r21, r21
     99e:	b1 f3       	breq	.-20     	; 0x98c <__floatsisf+0x84>
     9a0:	e7 fb       	bst	r30, 7
     9a2:	62 17       	cp	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	84 07       	cpc	r24, r20
     9a8:	95 07       	cpc	r25, r21
     9aa:	a8 f1       	brcs	.+106    	; 0xa16 <fmod+0x82>
     9ac:	89 f3       	breq	.-30     	; 0x990 <__floatsisf+0x88>
     9ae:	e9 2f       	mov	r30, r25
     9b0:	ff 27       	eor	r31, r31
     9b2:	88 23       	and	r24, r24
     9b4:	2a f0       	brmi	.+10     	; 0x9c0 <fmod+0x2c>
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	88 1f       	adc	r24, r24
     9be:	da f7       	brpl	.-10     	; 0x9b6 <fmod+0x22>
     9c0:	95 2f       	mov	r25, r21
     9c2:	55 27       	eor	r21, r21
     9c4:	44 23       	and	r20, r20
     9c6:	32 f0       	brmi	.+12     	; 0x9d4 <fmod+0x40>
     9c8:	91 50       	subi	r25, 0x01	; 1
     9ca:	50 40       	sbci	r21, 0x00	; 0
     9cc:	22 0f       	add	r18, r18
     9ce:	33 1f       	adc	r19, r19
     9d0:	44 1f       	adc	r20, r20
     9d2:	d2 f7       	brpl	.-12     	; 0x9c8 <fmod+0x34>
     9d4:	bb 27       	eor	r27, r27
     9d6:	e9 1b       	sub	r30, r25
     9d8:	f5 0b       	sbc	r31, r21
     9da:	62 1b       	sub	r22, r18
     9dc:	73 0b       	sbc	r23, r19
     9de:	84 0b       	sbc	r24, r20
     9e0:	b1 09       	sbc	r27, r1
     9e2:	b1 f2       	breq	.-84     	; 0x990 <__floatsisf+0x88>
     9e4:	22 f4       	brpl	.+8      	; 0x9ee <fmod+0x5a>
     9e6:	62 0f       	add	r22, r18
     9e8:	73 1f       	adc	r23, r19
     9ea:	84 1f       	adc	r24, r20
     9ec:	b1 1d       	adc	r27, r1
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	2a f0       	brmi	.+10     	; 0x9fc <fmod+0x68>
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	88 1f       	adc	r24, r24
     9f8:	bb 1f       	adc	r27, r27
     9fa:	ef cf       	rjmp	.-34     	; 0x9da <fmod+0x46>
     9fc:	91 50       	subi	r25, 0x01	; 1
     9fe:	50 40       	sbci	r21, 0x00	; 0
     a00:	62 f0       	brmi	.+24     	; 0xa1a <fmod+0x86>
     a02:	41 f0       	breq	.+16     	; 0xa14 <fmod+0x80>
     a04:	88 23       	and	r24, r24
     a06:	32 f0       	brmi	.+12     	; 0xa14 <fmod+0x80>
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	88 1f       	adc	r24, r24
     a0e:	91 50       	subi	r25, 0x01	; 1
     a10:	50 40       	sbci	r21, 0x00	; 0
     a12:	c1 f7       	brne	.-16     	; 0xa04 <fmod+0x70>
     a14:	93 95       	inc	r25
     a16:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_mpack>
     a1a:	86 95       	lsr	r24
     a1c:	77 95       	ror	r23
     a1e:	67 95       	ror	r22
     a20:	9f 5f       	subi	r25, 0xFF	; 255
     a22:	d9 f7       	brne	.-10     	; 0xa1a <fmod+0x86>
     a24:	f7 cf       	rjmp	.-18     	; 0xa14 <fmod+0x80>

00000a26 <__fp_cmp>:
     a26:	99 0f       	add	r25, r25
     a28:	00 08       	sbc	r0, r0
     a2a:	55 0f       	add	r21, r21
     a2c:	aa 0b       	sbc	r26, r26
     a2e:	e0 e8       	ldi	r30, 0x80	; 128
     a30:	fe ef       	ldi	r31, 0xFE	; 254
     a32:	16 16       	cp	r1, r22
     a34:	17 06       	cpc	r1, r23
     a36:	e8 07       	cpc	r30, r24
     a38:	f9 07       	cpc	r31, r25
     a3a:	c0 f0       	brcs	.+48     	; 0xa6c <__fp_cmp+0x46>
     a3c:	12 16       	cp	r1, r18
     a3e:	13 06       	cpc	r1, r19
     a40:	e4 07       	cpc	r30, r20
     a42:	f5 07       	cpc	r31, r21
     a44:	98 f0       	brcs	.+38     	; 0xa6c <__fp_cmp+0x46>
     a46:	62 1b       	sub	r22, r18
     a48:	73 0b       	sbc	r23, r19
     a4a:	84 0b       	sbc	r24, r20
     a4c:	95 0b       	sbc	r25, r21
     a4e:	39 f4       	brne	.+14     	; 0xa5e <__fp_cmp+0x38>
     a50:	0a 26       	eor	r0, r26
     a52:	61 f0       	breq	.+24     	; 0xa6c <__fp_cmp+0x46>
     a54:	23 2b       	or	r18, r19
     a56:	24 2b       	or	r18, r20
     a58:	25 2b       	or	r18, r21
     a5a:	21 f4       	brne	.+8      	; 0xa64 <__fp_cmp+0x3e>
     a5c:	08 95       	ret
     a5e:	0a 26       	eor	r0, r26
     a60:	09 f4       	brne	.+2      	; 0xa64 <__fp_cmp+0x3e>
     a62:	a1 40       	sbci	r26, 0x01	; 1
     a64:	a6 95       	lsr	r26
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	81 1d       	adc	r24, r1
     a6a:	81 1d       	adc	r24, r1
     a6c:	08 95       	ret

00000a6e <__fp_inf>:
     a6e:	97 f9       	bld	r25, 7
     a70:	9f 67       	ori	r25, 0x7F	; 127
     a72:	80 e8       	ldi	r24, 0x80	; 128
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	08 95       	ret

00000a7a <__fp_mpack>:
     a7a:	9f 3f       	cpi	r25, 0xFF	; 255
     a7c:	31 f0       	breq	.+12     	; 0xa8a <__fp_mpack_finite+0xc>

00000a7e <__fp_mpack_finite>:
     a7e:	91 50       	subi	r25, 0x01	; 1
     a80:	20 f4       	brcc	.+8      	; 0xa8a <__fp_mpack_finite+0xc>
     a82:	87 95       	ror	r24
     a84:	77 95       	ror	r23
     a86:	67 95       	ror	r22
     a88:	b7 95       	ror	r27
     a8a:	88 0f       	add	r24, r24
     a8c:	91 1d       	adc	r25, r1
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	97 f9       	bld	r25, 7
     a94:	08 95       	ret

00000a96 <__fp_nan>:
     a96:	9f ef       	ldi	r25, 0xFF	; 255
     a98:	80 ec       	ldi	r24, 0xC0	; 192
     a9a:	08 95       	ret

00000a9c <__fp_pscA>:
     a9c:	00 24       	eor	r0, r0
     a9e:	0a 94       	dec	r0
     aa0:	16 16       	cp	r1, r22
     aa2:	17 06       	cpc	r1, r23
     aa4:	18 06       	cpc	r1, r24
     aa6:	09 06       	cpc	r0, r25
     aa8:	08 95       	ret

00000aaa <__fp_pscB>:
     aaa:	00 24       	eor	r0, r0
     aac:	0a 94       	dec	r0
     aae:	12 16       	cp	r1, r18
     ab0:	13 06       	cpc	r1, r19
     ab2:	14 06       	cpc	r1, r20
     ab4:	05 06       	cpc	r0, r21
     ab6:	08 95       	ret

00000ab8 <__fp_round>:
     ab8:	09 2e       	mov	r0, r25
     aba:	03 94       	inc	r0
     abc:	00 0c       	add	r0, r0
     abe:	11 f4       	brne	.+4      	; 0xac4 <__fp_round+0xc>
     ac0:	88 23       	and	r24, r24
     ac2:	52 f0       	brmi	.+20     	; 0xad8 <__fp_round+0x20>
     ac4:	bb 0f       	add	r27, r27
     ac6:	40 f4       	brcc	.+16     	; 0xad8 <__fp_round+0x20>
     ac8:	bf 2b       	or	r27, r31
     aca:	11 f4       	brne	.+4      	; 0xad0 <__fp_round+0x18>
     acc:	60 ff       	sbrs	r22, 0
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <__fp_round+0x20>
     ad0:	6f 5f       	subi	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	8f 4f       	sbci	r24, 0xFF	; 255
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	08 95       	ret

00000ada <__fp_split3>:
     ada:	57 fd       	sbrc	r21, 7
     adc:	90 58       	subi	r25, 0x80	; 128
     ade:	44 0f       	add	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	59 f0       	breq	.+22     	; 0xafa <__fp_splitA+0x10>
     ae4:	5f 3f       	cpi	r21, 0xFF	; 255
     ae6:	71 f0       	breq	.+28     	; 0xb04 <__fp_splitA+0x1a>
     ae8:	47 95       	ror	r20

00000aea <__fp_splitA>:
     aea:	88 0f       	add	r24, r24
     aec:	97 fb       	bst	r25, 7
     aee:	99 1f       	adc	r25, r25
     af0:	61 f0       	breq	.+24     	; 0xb0a <__fp_splitA+0x20>
     af2:	9f 3f       	cpi	r25, 0xFF	; 255
     af4:	79 f0       	breq	.+30     	; 0xb14 <__fp_splitA+0x2a>
     af6:	87 95       	ror	r24
     af8:	08 95       	ret
     afa:	12 16       	cp	r1, r18
     afc:	13 06       	cpc	r1, r19
     afe:	14 06       	cpc	r1, r20
     b00:	55 1f       	adc	r21, r21
     b02:	f2 cf       	rjmp	.-28     	; 0xae8 <__fp_split3+0xe>
     b04:	46 95       	lsr	r20
     b06:	f1 df       	rcall	.-30     	; 0xaea <__fp_splitA>
     b08:	08 c0       	rjmp	.+16     	; 0xb1a <__fp_splitA+0x30>
     b0a:	16 16       	cp	r1, r22
     b0c:	17 06       	cpc	r1, r23
     b0e:	18 06       	cpc	r1, r24
     b10:	99 1f       	adc	r25, r25
     b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <__fp_splitA+0xc>
     b14:	86 95       	lsr	r24
     b16:	71 05       	cpc	r23, r1
     b18:	61 05       	cpc	r22, r1
     b1a:	08 94       	sec
     b1c:	08 95       	ret

00000b1e <__fp_zero>:
     b1e:	e8 94       	clt

00000b20 <__fp_szero>:
     b20:	bb 27       	eor	r27, r27
     b22:	66 27       	eor	r22, r22
     b24:	77 27       	eor	r23, r23
     b26:	cb 01       	movw	r24, r22
     b28:	97 f9       	bld	r25, 7
     b2a:	08 95       	ret

00000b2c <__mulsf3>:
     b2c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3x>
     b30:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>
     b34:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_pscA>
     b38:	38 f0       	brcs	.+14     	; 0xb48 <__mulsf3+0x1c>
     b3a:	0e 94 55 05 	call	0xaaa	; 0xaaa <__fp_pscB>
     b3e:	20 f0       	brcs	.+8      	; 0xb48 <__mulsf3+0x1c>
     b40:	95 23       	and	r25, r21
     b42:	11 f0       	breq	.+4      	; 0xb48 <__mulsf3+0x1c>
     b44:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     b48:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
     b4c:	11 24       	eor	r1, r1
     b4e:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>

00000b52 <__mulsf3x>:
     b52:	0e 94 6d 05 	call	0xada	; 0xada <__fp_split3>
     b56:	70 f3       	brcs	.-36     	; 0xb34 <__mulsf3+0x8>

00000b58 <__mulsf3_pse>:
     b58:	95 9f       	mul	r25, r21
     b5a:	c1 f3       	breq	.-16     	; 0xb4c <__mulsf3+0x20>
     b5c:	95 0f       	add	r25, r21
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	55 1f       	adc	r21, r21
     b62:	62 9f       	mul	r22, r18
     b64:	f0 01       	movw	r30, r0
     b66:	72 9f       	mul	r23, r18
     b68:	bb 27       	eor	r27, r27
     b6a:	f0 0d       	add	r31, r0
     b6c:	b1 1d       	adc	r27, r1
     b6e:	63 9f       	mul	r22, r19
     b70:	aa 27       	eor	r26, r26
     b72:	f0 0d       	add	r31, r0
     b74:	b1 1d       	adc	r27, r1
     b76:	aa 1f       	adc	r26, r26
     b78:	64 9f       	mul	r22, r20
     b7a:	66 27       	eor	r22, r22
     b7c:	b0 0d       	add	r27, r0
     b7e:	a1 1d       	adc	r26, r1
     b80:	66 1f       	adc	r22, r22
     b82:	82 9f       	mul	r24, r18
     b84:	22 27       	eor	r18, r18
     b86:	b0 0d       	add	r27, r0
     b88:	a1 1d       	adc	r26, r1
     b8a:	62 1f       	adc	r22, r18
     b8c:	73 9f       	mul	r23, r19
     b8e:	b0 0d       	add	r27, r0
     b90:	a1 1d       	adc	r26, r1
     b92:	62 1f       	adc	r22, r18
     b94:	83 9f       	mul	r24, r19
     b96:	a0 0d       	add	r26, r0
     b98:	61 1d       	adc	r22, r1
     b9a:	22 1f       	adc	r18, r18
     b9c:	74 9f       	mul	r23, r20
     b9e:	33 27       	eor	r19, r19
     ba0:	a0 0d       	add	r26, r0
     ba2:	61 1d       	adc	r22, r1
     ba4:	23 1f       	adc	r18, r19
     ba6:	84 9f       	mul	r24, r20
     ba8:	60 0d       	add	r22, r0
     baa:	21 1d       	adc	r18, r1
     bac:	82 2f       	mov	r24, r18
     bae:	76 2f       	mov	r23, r22
     bb0:	6a 2f       	mov	r22, r26
     bb2:	11 24       	eor	r1, r1
     bb4:	9f 57       	subi	r25, 0x7F	; 127
     bb6:	50 40       	sbci	r21, 0x00	; 0
     bb8:	9a f0       	brmi	.+38     	; 0xbe0 <__mulsf3_pse+0x88>
     bba:	f1 f0       	breq	.+60     	; 0xbf8 <__mulsf3_pse+0xa0>
     bbc:	88 23       	and	r24, r24
     bbe:	4a f0       	brmi	.+18     	; 0xbd2 <__mulsf3_pse+0x7a>
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	bb 1f       	adc	r27, r27
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	91 50       	subi	r25, 0x01	; 1
     bce:	50 40       	sbci	r21, 0x00	; 0
     bd0:	a9 f7       	brne	.-22     	; 0xbbc <__mulsf3_pse+0x64>
     bd2:	9e 3f       	cpi	r25, 0xFE	; 254
     bd4:	51 05       	cpc	r21, r1
     bd6:	80 f0       	brcs	.+32     	; 0xbf8 <__mulsf3_pse+0xa0>
     bd8:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     bdc:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
     be0:	5f 3f       	cpi	r21, 0xFF	; 255
     be2:	e4 f3       	brlt	.-8      	; 0xbdc <__mulsf3_pse+0x84>
     be4:	98 3e       	cpi	r25, 0xE8	; 232
     be6:	d4 f3       	brlt	.-12     	; 0xbdc <__mulsf3_pse+0x84>
     be8:	86 95       	lsr	r24
     bea:	77 95       	ror	r23
     bec:	67 95       	ror	r22
     bee:	b7 95       	ror	r27
     bf0:	f7 95       	ror	r31
     bf2:	e7 95       	ror	r30
     bf4:	9f 5f       	subi	r25, 0xFF	; 255
     bf6:	c1 f7       	brne	.-16     	; 0xbe8 <__mulsf3_pse+0x90>
     bf8:	fe 2b       	or	r31, r30
     bfa:	88 0f       	add	r24, r24
     bfc:	91 1d       	adc	r25, r1
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	97 f9       	bld	r25, 7
     c04:	08 95       	ret

00000c06 <pow>:
     c06:	fa 01       	movw	r30, r20
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	30 96       	adiw	r30, 0x00	; 0
     c0e:	21 05       	cpc	r18, r1
     c10:	31 05       	cpc	r19, r1
     c12:	a1 f1       	breq	.+104    	; 0xc7c <pow+0x76>
     c14:	61 15       	cp	r22, r1
     c16:	71 05       	cpc	r23, r1
     c18:	61 f4       	brne	.+24     	; 0xc32 <pow+0x2c>
     c1a:	80 38       	cpi	r24, 0x80	; 128
     c1c:	bf e3       	ldi	r27, 0x3F	; 63
     c1e:	9b 07       	cpc	r25, r27
     c20:	49 f1       	breq	.+82     	; 0xc74 <pow+0x6e>
     c22:	68 94       	set
     c24:	90 38       	cpi	r25, 0x80	; 128
     c26:	81 05       	cpc	r24, r1
     c28:	61 f0       	breq	.+24     	; 0xc42 <pow+0x3c>
     c2a:	80 38       	cpi	r24, 0x80	; 128
     c2c:	bf ef       	ldi	r27, 0xFF	; 255
     c2e:	9b 07       	cpc	r25, r27
     c30:	41 f0       	breq	.+16     	; 0xc42 <pow+0x3c>
     c32:	99 23       	and	r25, r25
     c34:	4a f5       	brpl	.+82     	; 0xc88 <pow+0x82>
     c36:	ff 3f       	cpi	r31, 0xFF	; 255
     c38:	e1 05       	cpc	r30, r1
     c3a:	31 05       	cpc	r19, r1
     c3c:	21 05       	cpc	r18, r1
     c3e:	19 f1       	breq	.+70     	; 0xc86 <pow+0x80>
     c40:	e8 94       	clt
     c42:	08 94       	sec
     c44:	e7 95       	ror	r30
     c46:	d9 01       	movw	r26, r18
     c48:	aa 23       	and	r26, r26
     c4a:	29 f4       	brne	.+10     	; 0xc56 <pow+0x50>
     c4c:	ab 2f       	mov	r26, r27
     c4e:	be 2f       	mov	r27, r30
     c50:	f8 5f       	subi	r31, 0xF8	; 248
     c52:	d0 f3       	brcs	.-12     	; 0xc48 <pow+0x42>
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <pow+0x70>
     c56:	ff 5f       	subi	r31, 0xFF	; 255
     c58:	70 f4       	brcc	.+28     	; 0xc76 <pow+0x70>
     c5a:	a6 95       	lsr	r26
     c5c:	e0 f7       	brcc	.-8      	; 0xc56 <pow+0x50>
     c5e:	f7 39       	cpi	r31, 0x97	; 151
     c60:	50 f0       	brcs	.+20     	; 0xc76 <pow+0x70>
     c62:	19 f0       	breq	.+6      	; 0xc6a <pow+0x64>
     c64:	ff 3a       	cpi	r31, 0xAF	; 175
     c66:	38 f4       	brcc	.+14     	; 0xc76 <pow+0x70>
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	9f 93       	push	r25
     c6c:	0d d0       	rcall	.+26     	; 0xc88 <pow+0x82>
     c6e:	0f 90       	pop	r0
     c70:	07 fc       	sbrc	r0, 7
     c72:	90 58       	subi	r25, 0x80	; 128
     c74:	08 95       	ret
     c76:	46 f0       	brts	.+16     	; 0xc88 <pow+0x82>
     c78:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	9f e3       	ldi	r25, 0x3F	; 63
     c84:	08 95       	ret
     c86:	4f e7       	ldi	r20, 0x7F	; 127
     c88:	9f 77       	andi	r25, 0x7F	; 127
     c8a:	5f 93       	push	r21
     c8c:	4f 93       	push	r20
     c8e:	3f 93       	push	r19
     c90:	2f 93       	push	r18
     c92:	0e 94 fe 06 	call	0xdfc	; 0xdfc <log>
     c96:	2f 91       	pop	r18
     c98:	3f 91       	pop	r19
     c9a:	4f 91       	pop	r20
     c9c:	5f 91       	pop	r21
     c9e:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3>
     ca2:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <exp>
     ca6:	29 f4       	brne	.+10     	; 0xcb2 <pow+0xac>
     ca8:	16 f0       	brts	.+4      	; 0xcae <pow+0xa8>
     caa:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     cae:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__fp_zero>
     cb2:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>

00000cb6 <exp>:
     cb6:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
     cba:	a8 f3       	brcs	.-22     	; 0xca6 <pow+0xa0>
     cbc:	96 38       	cpi	r25, 0x86	; 134
     cbe:	a0 f7       	brcc	.-24     	; 0xca8 <pow+0xa2>
     cc0:	07 f8       	bld	r0, 7
     cc2:	0f 92       	push	r0
     cc4:	e8 94       	clt
     cc6:	2b e3       	ldi	r18, 0x3B	; 59
     cc8:	3a ea       	ldi	r19, 0xAA	; 170
     cca:	48 eb       	ldi	r20, 0xB8	; 184
     ccc:	5f e7       	ldi	r21, 0x7F	; 127
     cce:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3_pse>
     cd2:	0f 92       	push	r0
     cd4:	0f 92       	push	r0
     cd6:	0f 92       	push	r0
     cd8:	4d b7       	in	r20, 0x3d	; 61
     cda:	5e b7       	in	r21, 0x3e	; 62
     cdc:	0f 92       	push	r0
     cde:	0e 94 46 07 	call	0xe8c	; 0xe8c <modf>
     ce2:	e8 e6       	ldi	r30, 0x68	; 104
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_powser>
     cea:	4f 91       	pop	r20
     cec:	5f 91       	pop	r21
     cee:	ef 91       	pop	r30
     cf0:	ff 91       	pop	r31
     cf2:	e5 95       	asr	r30
     cf4:	ee 1f       	adc	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	49 f0       	breq	.+18     	; 0xd0c <exp+0x56>
     cfa:	fe 57       	subi	r31, 0x7E	; 126
     cfc:	e0 68       	ori	r30, 0x80	; 128
     cfe:	44 27       	eor	r20, r20
     d00:	ee 0f       	add	r30, r30
     d02:	44 1f       	adc	r20, r20
     d04:	fa 95       	dec	r31
     d06:	e1 f7       	brne	.-8      	; 0xd00 <exp+0x4a>
     d08:	41 95       	neg	r20
     d0a:	55 0b       	sbc	r21, r21
     d0c:	0e 94 c0 06 	call	0xd80	; 0xd80 <ldexp>
     d10:	0f 90       	pop	r0
     d12:	07 fe       	sbrs	r0, 7
     d14:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <inverse>
     d18:	08 95       	ret

00000d1a <__fp_powser>:
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	1f 93       	push	r17
     d20:	0f 93       	push	r16
     d22:	ff 92       	push	r15
     d24:	ef 92       	push	r14
     d26:	df 92       	push	r13
     d28:	7b 01       	movw	r14, r22
     d2a:	8c 01       	movw	r16, r24
     d2c:	68 94       	set
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <__fp_powser+0x22>
     d30:	da 2e       	mov	r13, r26
     d32:	ef 01       	movw	r28, r30
     d34:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3x>
     d38:	fe 01       	movw	r30, r28
     d3a:	e8 94       	clt
     d3c:	a5 91       	lpm	r26, Z+
     d3e:	25 91       	lpm	r18, Z+
     d40:	35 91       	lpm	r19, Z+
     d42:	45 91       	lpm	r20, Z+
     d44:	55 91       	lpm	r21, Z+
     d46:	a6 f3       	brts	.-24     	; 0xd30 <__fp_powser+0x16>
     d48:	ef 01       	movw	r28, r30
     d4a:	0e 94 80 03 	call	0x700	; 0x700 <__addsf3x>
     d4e:	fe 01       	movw	r30, r28
     d50:	97 01       	movw	r18, r14
     d52:	a8 01       	movw	r20, r16
     d54:	da 94       	dec	r13
     d56:	69 f7       	brne	.-38     	; 0xd32 <__fp_powser+0x18>
     d58:	df 90       	pop	r13
     d5a:	ef 90       	pop	r14
     d5c:	ff 90       	pop	r15
     d5e:	0f 91       	pop	r16
     d60:	1f 91       	pop	r17
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <inverse>:
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	9f e3       	ldi	r25, 0x3F	; 63
     d74:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__divsf3>
     d78:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>
     d7c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_mpack>

00000d80 <ldexp>:
     d80:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
     d84:	d8 f3       	brcs	.-10     	; 0xd7c <inverse+0x14>
     d86:	99 23       	and	r25, r25
     d88:	c9 f3       	breq	.-14     	; 0xd7c <inverse+0x14>
     d8a:	94 0f       	add	r25, r20
     d8c:	51 1d       	adc	r21, r1
     d8e:	a3 f3       	brvs	.-24     	; 0xd78 <inverse+0x10>
     d90:	91 50       	subi	r25, 0x01	; 1
     d92:	50 40       	sbci	r21, 0x00	; 0
     d94:	94 f0       	brlt	.+36     	; 0xdba <ldexp+0x3a>
     d96:	59 f0       	breq	.+22     	; 0xdae <ldexp+0x2e>
     d98:	88 23       	and	r24, r24
     d9a:	32 f0       	brmi	.+12     	; 0xda8 <ldexp+0x28>
     d9c:	66 0f       	add	r22, r22
     d9e:	77 1f       	adc	r23, r23
     da0:	88 1f       	adc	r24, r24
     da2:	91 50       	subi	r25, 0x01	; 1
     da4:	50 40       	sbci	r21, 0x00	; 0
     da6:	c1 f7       	brne	.-16     	; 0xd98 <ldexp+0x18>
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	51 05       	cpc	r21, r1
     dac:	2c f7       	brge	.-54     	; 0xd78 <inverse+0x10>
     dae:	88 0f       	add	r24, r24
     db0:	91 1d       	adc	r25, r1
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret
     dba:	5f 3f       	cpi	r21, 0xFF	; 255
     dbc:	ac f0       	brlt	.+42     	; 0xde8 <ldexp+0x68>
     dbe:	98 3e       	cpi	r25, 0xE8	; 232
     dc0:	9c f0       	brlt	.+38     	; 0xde8 <ldexp+0x68>
     dc2:	bb 27       	eor	r27, r27
     dc4:	86 95       	lsr	r24
     dc6:	77 95       	ror	r23
     dc8:	67 95       	ror	r22
     dca:	b7 95       	ror	r27
     dcc:	08 f4       	brcc	.+2      	; 0xdd0 <ldexp+0x50>
     dce:	b1 60       	ori	r27, 0x01	; 1
     dd0:	93 95       	inc	r25
     dd2:	c1 f7       	brne	.-16     	; 0xdc4 <ldexp+0x44>
     dd4:	bb 0f       	add	r27, r27
     dd6:	58 f7       	brcc	.-42     	; 0xdae <ldexp+0x2e>
     dd8:	11 f4       	brne	.+4      	; 0xdde <ldexp+0x5e>
     dda:	60 ff       	sbrs	r22, 0
     ddc:	e8 cf       	rjmp	.-48     	; 0xdae <ldexp+0x2e>
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	8f 4f       	sbci	r24, 0xFF	; 255
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	e3 cf       	rjmp	.-58     	; 0xdae <ldexp+0x2e>
     de8:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_szero>
     dec:	16 f0       	brts	.+4      	; 0xdf2 <ldexp+0x72>
     dee:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_mpack>
     df2:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__fp_nan>
     df6:	68 94       	set
     df8:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__fp_inf>

00000dfc <log>:
     dfc:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_splitA>
     e00:	a8 f3       	brcs	.-22     	; 0xdec <ldexp+0x6c>
     e02:	99 23       	and	r25, r25
     e04:	c1 f3       	breq	.-16     	; 0xdf6 <ldexp+0x76>
     e06:	ae f3       	brts	.-22     	; 0xdf2 <ldexp+0x72>
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	1f 93       	push	r17
     e0e:	0f 93       	push	r16
     e10:	ff 92       	push	r15
     e12:	c9 2f       	mov	r28, r25
     e14:	dd 27       	eor	r29, r29
     e16:	88 23       	and	r24, r24
     e18:	2a f0       	brmi	.+10     	; 0xe24 <log+0x28>
     e1a:	21 97       	sbiw	r28, 0x01	; 1
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	da f7       	brpl	.-10     	; 0xe1a <log+0x1e>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f eb       	ldi	r21, 0xBF	; 191
     e2c:	9f e3       	ldi	r25, 0x3F	; 63
     e2e:	88 39       	cpi	r24, 0x98	; 152
     e30:	20 f0       	brcs	.+8      	; 0xe3a <log+0x3e>
     e32:	80 3e       	cpi	r24, 0xE0	; 224
     e34:	38 f0       	brcs	.+14     	; 0xe44 <log+0x48>
     e36:	21 96       	adiw	r28, 0x01	; 1
     e38:	8f 77       	andi	r24, 0x7F	; 127
     e3a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__addsf3>
     e3e:	e0 e9       	ldi	r30, 0x90	; 144
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <log+0x50>
     e44:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__addsf3>
     e48:	ed eb       	ldi	r30, 0xBD	; 189
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_powser>
     e50:	8b 01       	movw	r16, r22
     e52:	be 01       	movw	r22, r28
     e54:	ec 01       	movw	r28, r24
     e56:	fb 2e       	mov	r15, r27
     e58:	6f 57       	subi	r22, 0x7F	; 127
     e5a:	71 09       	sbc	r23, r1
     e5c:	75 95       	asr	r23
     e5e:	77 1f       	adc	r23, r23
     e60:	88 0b       	sbc	r24, r24
     e62:	99 0b       	sbc	r25, r25
     e64:	0e 94 84 04 	call	0x908	; 0x908 <__floatsisf>
     e68:	28 e1       	ldi	r18, 0x18	; 24
     e6a:	32 e7       	ldi	r19, 0x72	; 114
     e6c:	41 e3       	ldi	r20, 0x31	; 49
     e6e:	5f e3       	ldi	r21, 0x3F	; 63
     e70:	0e 94 a9 05 	call	0xb52	; 0xb52 <__mulsf3x>
     e74:	af 2d       	mov	r26, r15
     e76:	98 01       	movw	r18, r16
     e78:	ae 01       	movw	r20, r28
     e7a:	ff 90       	pop	r15
     e7c:	0f 91       	pop	r16
     e7e:	1f 91       	pop	r17
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	0e 94 80 03 	call	0x700	; 0x700 <__addsf3x>
     e88:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__fp_round>

00000e8c <modf>:
     e8c:	fa 01       	movw	r30, r20
     e8e:	dc 01       	movw	r26, r24
     e90:	aa 0f       	add	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	bf 57       	subi	r27, 0x7F	; 127
     e9a:	28 f4       	brcc	.+10     	; 0xea6 <modf+0x1a>
     e9c:	22 27       	eor	r18, r18
     e9e:	33 27       	eor	r19, r19
     ea0:	44 27       	eor	r20, r20
     ea2:	50 78       	andi	r21, 0x80	; 128
     ea4:	20 c0       	rjmp	.+64     	; 0xee6 <modf+0x5a>
     ea6:	b7 51       	subi	r27, 0x17	; 23
     ea8:	90 f4       	brcc	.+36     	; 0xece <modf+0x42>
     eaa:	ab 2f       	mov	r26, r27
     eac:	00 24       	eor	r0, r0
     eae:	46 95       	lsr	r20
     eb0:	37 95       	ror	r19
     eb2:	27 95       	ror	r18
     eb4:	01 1c       	adc	r0, r1
     eb6:	a3 95       	inc	r26
     eb8:	d2 f3       	brmi	.-12     	; 0xeae <modf+0x22>
     eba:	00 20       	and	r0, r0
     ebc:	71 f0       	breq	.+28     	; 0xeda <modf+0x4e>
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	44 1f       	adc	r20, r20
     ec4:	b3 95       	inc	r27
     ec6:	da f3       	brmi	.-10     	; 0xebe <modf+0x32>
     ec8:	0e d0       	rcall	.+28     	; 0xee6 <modf+0x5a>
     eca:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__subsf3>
     ece:	61 30       	cpi	r22, 0x01	; 1
     ed0:	71 05       	cpc	r23, r1
     ed2:	a0 e8       	ldi	r26, 0x80	; 128
     ed4:	8a 07       	cpc	r24, r26
     ed6:	b9 46       	sbci	r27, 0x69	; 105
     ed8:	30 f4       	brcc	.+12     	; 0xee6 <modf+0x5a>
     eda:	9b 01       	movw	r18, r22
     edc:	ac 01       	movw	r20, r24
     ede:	66 27       	eor	r22, r22
     ee0:	77 27       	eor	r23, r23
     ee2:	88 27       	eor	r24, r24
     ee4:	90 78       	andi	r25, 0x80	; 128
     ee6:	30 96       	adiw	r30, 0x00	; 0
     ee8:	21 f0       	breq	.+8      	; 0xef2 <modf+0x66>
     eea:	20 83       	st	Z, r18
     eec:	31 83       	std	Z+1, r19	; 0x01
     eee:	42 83       	std	Z+2, r20	; 0x02
     ef0:	53 83       	std	Z+3, r21	; 0x03
     ef2:	08 95       	ret

00000ef4 <__divmodhi4>:
     ef4:	97 fb       	bst	r25, 7
     ef6:	07 2e       	mov	r0, r23
     ef8:	16 f4       	brtc	.+4      	; 0xefe <__divmodhi4+0xa>
     efa:	00 94       	com	r0
     efc:	07 d0       	rcall	.+14     	; 0xf0c <__divmodhi4_neg1>
     efe:	77 fd       	sbrc	r23, 7
     f00:	09 d0       	rcall	.+18     	; 0xf14 <__divmodhi4_neg2>
     f02:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__udivmodhi4>
     f06:	07 fc       	sbrc	r0, 7
     f08:	05 d0       	rcall	.+10     	; 0xf14 <__divmodhi4_neg2>
     f0a:	3e f4       	brtc	.+14     	; 0xf1a <__divmodhi4_exit>

00000f0c <__divmodhi4_neg1>:
     f0c:	90 95       	com	r25
     f0e:	81 95       	neg	r24
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__divmodhi4_neg2>:
     f14:	70 95       	com	r23
     f16:	61 95       	neg	r22
     f18:	7f 4f       	sbci	r23, 0xFF	; 255

00000f1a <__divmodhi4_exit>:
     f1a:	08 95       	ret

00000f1c <__udivmodhi4>:
     f1c:	aa 1b       	sub	r26, r26
     f1e:	bb 1b       	sub	r27, r27
     f20:	51 e1       	ldi	r21, 0x11	; 17
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <__udivmodhi4_ep>

00000f24 <__udivmodhi4_loop>:
     f24:	aa 1f       	adc	r26, r26
     f26:	bb 1f       	adc	r27, r27
     f28:	a6 17       	cp	r26, r22
     f2a:	b7 07       	cpc	r27, r23
     f2c:	10 f0       	brcs	.+4      	; 0xf32 <__udivmodhi4_ep>
     f2e:	a6 1b       	sub	r26, r22
     f30:	b7 0b       	sbc	r27, r23

00000f32 <__udivmodhi4_ep>:
     f32:	88 1f       	adc	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	5a 95       	dec	r21
     f38:	a9 f7       	brne	.-22     	; 0xf24 <__udivmodhi4_loop>
     f3a:	80 95       	com	r24
     f3c:	90 95       	com	r25
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	08 95       	ret

00000f44 <malloc>:
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	91 05       	cpc	r25, r1
     f4c:	10 f4       	brcc	.+4      	; 0xf52 <malloc+0xe>
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	e0 91 08 01 	lds	r30, 0x0108
     f56:	f0 91 09 01 	lds	r31, 0x0109
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	30 97       	sbiw	r30, 0x00	; 0
     f64:	11 f1       	breq	.+68     	; 0xfaa <malloc+0x66>
     f66:	40 81       	ld	r20, Z
     f68:	51 81       	ldd	r21, Z+1	; 0x01
     f6a:	48 17       	cp	r20, r24
     f6c:	59 07       	cpc	r21, r25
     f6e:	c0 f0       	brcs	.+48     	; 0xfa0 <malloc+0x5c>
     f70:	48 17       	cp	r20, r24
     f72:	59 07       	cpc	r21, r25
     f74:	61 f4       	brne	.+24     	; 0xf8e <malloc+0x4a>
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	20 97       	sbiw	r28, 0x00	; 0
     f7c:	19 f0       	breq	.+6      	; 0xf84 <malloc+0x40>
     f7e:	9b 83       	std	Y+3, r25	; 0x03
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	2b c0       	rjmp	.+86     	; 0xfda <malloc+0x96>
     f84:	90 93 09 01 	sts	0x0109, r25
     f88:	80 93 08 01 	sts	0x0108, r24
     f8c:	26 c0       	rjmp	.+76     	; 0xfda <malloc+0x96>
     f8e:	21 15       	cp	r18, r1
     f90:	31 05       	cpc	r19, r1
     f92:	19 f0       	breq	.+6      	; 0xf9a <malloc+0x56>
     f94:	42 17       	cp	r20, r18
     f96:	53 07       	cpc	r21, r19
     f98:	18 f4       	brcc	.+6      	; 0xfa0 <malloc+0x5c>
     f9a:	9a 01       	movw	r18, r20
     f9c:	be 01       	movw	r22, r28
     f9e:	df 01       	movw	r26, r30
     fa0:	ef 01       	movw	r28, r30
     fa2:	02 80       	ldd	r0, Z+2	; 0x02
     fa4:	f3 81       	ldd	r31, Z+3	; 0x03
     fa6:	e0 2d       	mov	r30, r0
     fa8:	dc cf       	rjmp	.-72     	; 0xf62 <malloc+0x1e>
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	09 f1       	breq	.+66     	; 0xff2 <malloc+0xae>
     fb0:	28 1b       	sub	r18, r24
     fb2:	39 0b       	sbc	r19, r25
     fb4:	24 30       	cpi	r18, 0x04	; 4
     fb6:	31 05       	cpc	r19, r1
     fb8:	90 f4       	brcc	.+36     	; 0xfde <malloc+0x9a>
     fba:	12 96       	adiw	r26, 0x02	; 2
     fbc:	8d 91       	ld	r24, X+
     fbe:	9c 91       	ld	r25, X
     fc0:	13 97       	sbiw	r26, 0x03	; 3
     fc2:	61 15       	cp	r22, r1
     fc4:	71 05       	cpc	r23, r1
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <malloc+0x8c>
     fc8:	fb 01       	movw	r30, r22
     fca:	93 83       	std	Z+3, r25	; 0x03
     fcc:	82 83       	std	Z+2, r24	; 0x02
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <malloc+0x94>
     fd0:	90 93 09 01 	sts	0x0109, r25
     fd4:	80 93 08 01 	sts	0x0108, r24
     fd8:	fd 01       	movw	r30, r26
     fda:	32 96       	adiw	r30, 0x02	; 2
     fdc:	44 c0       	rjmp	.+136    	; 0x1066 <malloc+0x122>
     fde:	fd 01       	movw	r30, r26
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	81 93       	st	Z+, r24
     fe6:	91 93       	st	Z+, r25
     fe8:	22 50       	subi	r18, 0x02	; 2
     fea:	31 09       	sbc	r19, r1
     fec:	2d 93       	st	X+, r18
     fee:	3c 93       	st	X, r19
     ff0:	3a c0       	rjmp	.+116    	; 0x1066 <malloc+0x122>
     ff2:	20 91 06 01 	lds	r18, 0x0106
     ff6:	30 91 07 01 	lds	r19, 0x0107
     ffa:	23 2b       	or	r18, r19
     ffc:	41 f4       	brne	.+16     	; 0x100e <malloc+0xca>
     ffe:	20 91 02 01 	lds	r18, 0x0102
    1002:	30 91 03 01 	lds	r19, 0x0103
    1006:	30 93 07 01 	sts	0x0107, r19
    100a:	20 93 06 01 	sts	0x0106, r18
    100e:	20 91 00 01 	lds	r18, 0x0100
    1012:	30 91 01 01 	lds	r19, 0x0101
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	41 f4       	brne	.+16     	; 0x102c <malloc+0xe8>
    101c:	2d b7       	in	r18, 0x3d	; 61
    101e:	3e b7       	in	r19, 0x3e	; 62
    1020:	40 91 04 01 	lds	r20, 0x0104
    1024:	50 91 05 01 	lds	r21, 0x0105
    1028:	24 1b       	sub	r18, r20
    102a:	35 0b       	sbc	r19, r21
    102c:	e0 91 06 01 	lds	r30, 0x0106
    1030:	f0 91 07 01 	lds	r31, 0x0107
    1034:	e2 17       	cp	r30, r18
    1036:	f3 07       	cpc	r31, r19
    1038:	a0 f4       	brcc	.+40     	; 0x1062 <malloc+0x11e>
    103a:	2e 1b       	sub	r18, r30
    103c:	3f 0b       	sbc	r19, r31
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	78 f0       	brcs	.+30     	; 0x1062 <malloc+0x11e>
    1044:	ac 01       	movw	r20, r24
    1046:	4e 5f       	subi	r20, 0xFE	; 254
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	24 17       	cp	r18, r20
    104c:	35 07       	cpc	r19, r21
    104e:	48 f0       	brcs	.+18     	; 0x1062 <malloc+0x11e>
    1050:	4e 0f       	add	r20, r30
    1052:	5f 1f       	adc	r21, r31
    1054:	50 93 07 01 	sts	0x0107, r21
    1058:	40 93 06 01 	sts	0x0106, r20
    105c:	81 93       	st	Z+, r24
    105e:	91 93       	st	Z+, r25
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <malloc+0x122>
    1062:	e0 e0       	ldi	r30, 0x00	; 0
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	cf 01       	movw	r24, r30
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <free>:
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	09 f4       	brne	.+2      	; 0x107c <free+0xe>
    107a:	8c c0       	rjmp	.+280    	; 0x1194 <free+0x126>
    107c:	fc 01       	movw	r30, r24
    107e:	32 97       	sbiw	r30, 0x02	; 2
    1080:	13 82       	std	Z+3, r1	; 0x03
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	00 91 08 01 	lds	r16, 0x0108
    1088:	10 91 09 01 	lds	r17, 0x0109
    108c:	01 15       	cp	r16, r1
    108e:	11 05       	cpc	r17, r1
    1090:	81 f4       	brne	.+32     	; 0x10b2 <free+0x44>
    1092:	20 81       	ld	r18, Z
    1094:	31 81       	ldd	r19, Z+1	; 0x01
    1096:	82 0f       	add	r24, r18
    1098:	93 1f       	adc	r25, r19
    109a:	20 91 06 01 	lds	r18, 0x0106
    109e:	30 91 07 01 	lds	r19, 0x0107
    10a2:	28 17       	cp	r18, r24
    10a4:	39 07       	cpc	r19, r25
    10a6:	79 f5       	brne	.+94     	; 0x1106 <free+0x98>
    10a8:	f0 93 07 01 	sts	0x0107, r31
    10ac:	e0 93 06 01 	sts	0x0106, r30
    10b0:	71 c0       	rjmp	.+226    	; 0x1194 <free+0x126>
    10b2:	d8 01       	movw	r26, r16
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	ae 17       	cp	r26, r30
    10ba:	bf 07       	cpc	r27, r31
    10bc:	50 f4       	brcc	.+20     	; 0x10d2 <free+0x64>
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	2d 91       	ld	r18, X+
    10c2:	3c 91       	ld	r19, X
    10c4:	13 97       	sbiw	r26, 0x03	; 3
    10c6:	ad 01       	movw	r20, r26
    10c8:	21 15       	cp	r18, r1
    10ca:	31 05       	cpc	r19, r1
    10cc:	09 f1       	breq	.+66     	; 0x1110 <free+0xa2>
    10ce:	d9 01       	movw	r26, r18
    10d0:	f3 cf       	rjmp	.-26     	; 0x10b8 <free+0x4a>
    10d2:	9d 01       	movw	r18, r26
    10d4:	da 01       	movw	r26, r20
    10d6:	33 83       	std	Z+3, r19	; 0x03
    10d8:	22 83       	std	Z+2, r18	; 0x02
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	86 0f       	add	r24, r22
    10e0:	97 1f       	adc	r25, r23
    10e2:	82 17       	cp	r24, r18
    10e4:	93 07       	cpc	r25, r19
    10e6:	69 f4       	brne	.+26     	; 0x1102 <free+0x94>
    10e8:	ec 01       	movw	r28, r24
    10ea:	28 81       	ld	r18, Y
    10ec:	39 81       	ldd	r19, Y+1	; 0x01
    10ee:	26 0f       	add	r18, r22
    10f0:	37 1f       	adc	r19, r23
    10f2:	2e 5f       	subi	r18, 0xFE	; 254
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	31 83       	std	Z+1, r19	; 0x01
    10f8:	20 83       	st	Z, r18
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	9b 81       	ldd	r25, Y+3	; 0x03
    10fe:	93 83       	std	Z+3, r25	; 0x03
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	45 2b       	or	r20, r21
    1104:	29 f4       	brne	.+10     	; 0x1110 <free+0xa2>
    1106:	f0 93 09 01 	sts	0x0109, r31
    110a:	e0 93 08 01 	sts	0x0108, r30
    110e:	42 c0       	rjmp	.+132    	; 0x1194 <free+0x126>
    1110:	13 96       	adiw	r26, 0x03	; 3
    1112:	fc 93       	st	X, r31
    1114:	ee 93       	st	-X, r30
    1116:	12 97       	sbiw	r26, 0x02	; 2
    1118:	ed 01       	movw	r28, r26
    111a:	49 91       	ld	r20, Y+
    111c:	59 91       	ld	r21, Y+
    111e:	9e 01       	movw	r18, r28
    1120:	24 0f       	add	r18, r20
    1122:	35 1f       	adc	r19, r21
    1124:	e2 17       	cp	r30, r18
    1126:	f3 07       	cpc	r31, r19
    1128:	71 f4       	brne	.+28     	; 0x1146 <free+0xd8>
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	84 0f       	add	r24, r20
    1130:	95 1f       	adc	r25, r21
    1132:	02 96       	adiw	r24, 0x02	; 2
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	9c 93       	st	X, r25
    1138:	8e 93       	st	-X, r24
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	13 96       	adiw	r26, 0x03	; 3
    1140:	9c 93       	st	X, r25
    1142:	8e 93       	st	-X, r24
    1144:	12 97       	sbiw	r26, 0x02	; 2
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	d8 01       	movw	r26, r16
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	8d 91       	ld	r24, X+
    1150:	9c 91       	ld	r25, X
    1152:	13 97       	sbiw	r26, 0x03	; 3
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	19 f0       	breq	.+6      	; 0x115e <free+0xf0>
    1158:	f8 01       	movw	r30, r16
    115a:	8c 01       	movw	r16, r24
    115c:	f6 cf       	rjmp	.-20     	; 0x114a <free+0xdc>
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	98 01       	movw	r18, r16
    1164:	2e 5f       	subi	r18, 0xFE	; 254
    1166:	3f 4f       	sbci	r19, 0xFF	; 255
    1168:	82 0f       	add	r24, r18
    116a:	93 1f       	adc	r25, r19
    116c:	20 91 06 01 	lds	r18, 0x0106
    1170:	30 91 07 01 	lds	r19, 0x0107
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	69 f4       	brne	.+26     	; 0x1194 <free+0x126>
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	29 f4       	brne	.+10     	; 0x1188 <free+0x11a>
    117e:	10 92 09 01 	sts	0x0109, r1
    1182:	10 92 08 01 	sts	0x0108, r1
    1186:	02 c0       	rjmp	.+4      	; 0x118c <free+0x11e>
    1188:	13 82       	std	Z+3, r1	; 0x03
    118a:	12 82       	std	Z+2, r1	; 0x02
    118c:	10 93 07 01 	sts	0x0107, r17
    1190:	00 93 06 01 	sts	0x0106, r16
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <_exit>:
    119e:	f8 94       	cli

000011a0 <__stop_program>:
    11a0:	ff cf       	rjmp	.-2      	; 0x11a0 <__stop_program>

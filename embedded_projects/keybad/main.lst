   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__floatsisf
  11               	.global	__mulsf3
  12               	.global	__addsf3
  13               	.global	__fixsfsi
  14               	.global	arr_char_to_int
  16               	arr_char_to_int:
  17               	.LFB10:
  18               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 1000000UL
   2:main.c        **** #include<avr/io.h>
   3:main.c        **** #include<util/delay.h>
   4:main.c        **** #include <stdlib.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "keybad.h"
   7:main.c        **** #include "lcd.h"
   8:main.c        **** #define no_digits 10
   9:main.c        **** int arr_char_to_int(unsigned char * arr){
  19               		.loc 1 9 0
  20               		.cfi_startproc
  21               	.LVL0:
  22 0000 7F92      		push r7
  23               	.LCFI0:
  24               		.cfi_def_cfa_offset 3
  25               		.cfi_offset 7, -2
  26 0002 AF92      		push r10
  27               	.LCFI1:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 10, -3
  30 0004 BF92      		push r11
  31               	.LCFI2:
  32               		.cfi_def_cfa_offset 5
  33               		.cfi_offset 11, -4
  34 0006 CF92      		push r12
  35               	.LCFI3:
  36               		.cfi_def_cfa_offset 6
  37               		.cfi_offset 12, -5
  38 0008 DF92      		push r13
  39               	.LCFI4:
  40               		.cfi_def_cfa_offset 7
  41               		.cfi_offset 13, -6
  42 000a EF92      		push r14
  43               	.LCFI5:
  44               		.cfi_def_cfa_offset 8
  45               		.cfi_offset 14, -7
  46 000c FF92      		push r15
  47               	.LCFI6:
  48               		.cfi_def_cfa_offset 9
  49               		.cfi_offset 15, -8
  50 000e 0F93      		push r16
  51               	.LCFI7:
  52               		.cfi_def_cfa_offset 10
  53               		.cfi_offset 16, -9
  54 0010 1F93      		push r17
  55               	.LCFI8:
  56               		.cfi_def_cfa_offset 11
  57               		.cfi_offset 17, -10
  58 0012 CF93      		push r28
  59               	.LCFI9:
  60               		.cfi_def_cfa_offset 12
  61               		.cfi_offset 28, -11
  62 0014 DF93      		push r29
  63               	.LCFI10:
  64               		.cfi_def_cfa_offset 13
  65               		.cfi_offset 29, -12
  66 0016 00D0      		rcall .
  67 0018 00D0      		rcall .
  68               	.LCFI11:
  69               		.cfi_def_cfa_offset 17
  70 001a CDB7      		in r28,__SP_L__
  71 001c DEB7      		in r29,__SP_H__
  72               	.LCFI12:
  73               		.cfi_def_cfa_register 28
  74               	/* prologue: function */
  75               	/* frame size = 4 */
  76               	/* stack size = 15 */
  77               	.L__stack_usage = 15
  78 001e 8C01      		movw r16,r24
  79               	.LVL1:
  10:main.c        **** int index=0;
  11:main.c        **** //int length;
  12:main.c        **** int rank;
  13:main.c        **** while(arr[index]!='\0')
  80               		.loc 1 13 0
  81 0020 FC01      		movw r30,r24
  82               	.LVL2:
  83               	.L2:
  84 0022 5F01      		movw r10,r30
  85 0024 A01A      		sub r10,r16
  86 0026 B10A      		sbc r11,r17
  87               	.LVL3:
  88 0028 8191      		ld r24,Z+
  89 002a 8111      		cpse r24,__zero_reg__
  90 002c 00C0      		rjmp .L2
  91               	.LVL4:
  14:main.c        **** {index++;
  15:main.c        **** }
  16:main.c        **** //length=index;
  17:main.c        **** rank=index;
  18:main.c        **** index=0;
  19:main.c        **** int number;
  20:main.c        **** int sum=0;
  92               		.loc 1 20 0
  93 002e E12C      		mov r14,__zero_reg__
  94 0030 F12C      		mov r15,__zero_reg__
  95               	.LVL5:
  96               	.L3:
  21:main.c        **** while(arr[index]!='\0')
  97               		.loc 1 21 0
  98 0032 F801      		movw r30,r16
  99 0034 7190      		ld r7,Z+
 100 0036 8F01      		movw r16,r30
 101               	.LVL6:
 102 0038 7720      		tst r7
 103 003a 01F0      		breq .L7
 104               	.LVL7:
  22:main.c        **** {number=arr[index]-'0';
  23:main.c        **** sum+=number*(pow(10,rank-1));
 105               		.loc 1 23 0
 106 003c 81E0      		ldi r24,1
 107 003e A81A      		sub r10,r24
 108 0040 B108      		sbc r11,__zero_reg__
 109               	.LVL8:
 110 0042 B501      		movw r22,r10
 111 0044 0B2C      		mov __tmp_reg__,r11
 112 0046 000C      		lsl r0
 113 0048 880B      		sbc r24,r24
 114 004a 990B      		sbc r25,r25
 115 004c 0E94 0000 		call __floatsisf
 116               	.LVL9:
 117 0050 9B01      		movw r18,r22
 118 0052 AC01      		movw r20,r24
 119 0054 60E0      		ldi r22,0
 120 0056 70E0      		ldi r23,0
 121 0058 80E2      		ldi r24,lo8(32)
 122 005a 91E4      		ldi r25,lo8(65)
 123 005c 0E94 0000 		call pow
 124               	.LVL10:
 125 0060 9B01      		movw r18,r22
 126 0062 AC01      		movw r20,r24
 127 0064 B701      		movw r22,r14
 128 0066 FF0C      		lsl r15
 129 0068 880B      		sbc r24,r24
 130 006a 990B      		sbc r25,r25
 131 006c 2983      		std Y+1,r18
 132 006e 3A83      		std Y+2,r19
 133 0070 4B83      		std Y+3,r20
 134 0072 5C83      		std Y+4,r21
 135 0074 0E94 0000 		call __floatsisf
 136               	.LVL11:
 137 0078 6B01      		movw r12,r22
 138 007a 7C01      		movw r14,r24
  22:main.c        **** {number=arr[index]-'0';
 139               		.loc 1 22 0
 140 007c 872D      		mov r24,r7
 141 007e 90E0      		ldi r25,0
 142 0080 C097      		sbiw r24,48
 143               		.loc 1 23 0
 144 0082 BC01      		movw r22,r24
 145 0084 990F      		lsl r25
 146 0086 880B      		sbc r24,r24
 147 0088 990B      		sbc r25,r25
 148 008a 0E94 0000 		call __floatsisf
 149               	.LVL12:
 150 008e 2981      		ldd r18,Y+1
 151 0090 3A81      		ldd r19,Y+2
 152 0092 4B81      		ldd r20,Y+3
 153 0094 5C81      		ldd r21,Y+4
 154 0096 0E94 0000 		call __mulsf3
 155               	.LVL13:
 156 009a 9B01      		movw r18,r22
 157 009c AC01      		movw r20,r24
 158 009e C701      		movw r24,r14
 159 00a0 B601      		movw r22,r12
 160 00a2 0E94 0000 		call __addsf3
 161               	.LVL14:
 162 00a6 0E94 0000 		call __fixsfsi
 163               	.LVL15:
 164 00aa 7B01      		movw r14,r22
 165               	.LVL16:
 166 00ac 00C0      		rjmp .L3
 167               	.LVL17:
 168               	.L7:
  24:main.c        **** index++;
  25:main.c        **** rank--;
  26:main.c        **** }
  27:main.c        **** return sum;
  28:main.c        **** }
 169               		.loc 1 28 0
 170 00ae C701      		movw r24,r14
 171               	/* epilogue start */
 172 00b0 0F90      		pop __tmp_reg__
 173 00b2 0F90      		pop __tmp_reg__
 174 00b4 0F90      		pop __tmp_reg__
 175 00b6 0F90      		pop __tmp_reg__
 176 00b8 DF91      		pop r29
 177 00ba CF91      		pop r28
 178 00bc 1F91      		pop r17
 179 00be 0F91      		pop r16
 180               	.LVL18:
 181 00c0 FF90      		pop r15
 182 00c2 EF90      		pop r14
 183               	.LVL19:
 184 00c4 DF90      		pop r13
 185 00c6 CF90      		pop r12
 186 00c8 BF90      		pop r11
 187 00ca AF90      		pop r10
 188               	.LVL20:
 189 00cc 7F90      		pop r7
 190 00ce 0895      		ret
 191               		.cfi_endproc
 192               	.LFE10:
 194               	.global	__divsf3
 195               	.global	calculate
 197               	calculate:
 198               	.LFB11:
  29:main.c        **** 
  30:main.c        **** double calculate(unsigned char * first_arg,unsigned char * sec_arg,unsigned char op){
 199               		.loc 1 30 0
 200               		.cfi_startproc
 201               	.LVL21:
 202 00d0 AF92      		push r10
 203               	.LCFI13:
 204               		.cfi_def_cfa_offset 3
 205               		.cfi_offset 10, -2
 206 00d2 BF92      		push r11
 207               	.LCFI14:
 208               		.cfi_def_cfa_offset 4
 209               		.cfi_offset 11, -3
 210 00d4 CF92      		push r12
 211               	.LCFI15:
 212               		.cfi_def_cfa_offset 5
 213               		.cfi_offset 12, -4
 214 00d6 DF92      		push r13
 215               	.LCFI16:
 216               		.cfi_def_cfa_offset 6
 217               		.cfi_offset 13, -5
 218 00d8 EF92      		push r14
 219               	.LCFI17:
 220               		.cfi_def_cfa_offset 7
 221               		.cfi_offset 14, -6
 222 00da FF92      		push r15
 223               	.LCFI18:
 224               		.cfi_def_cfa_offset 8
 225               		.cfi_offset 15, -7
 226 00dc 0F93      		push r16
 227               	.LCFI19:
 228               		.cfi_def_cfa_offset 9
 229               		.cfi_offset 16, -8
 230 00de 1F93      		push r17
 231               	.LCFI20:
 232               		.cfi_def_cfa_offset 10
 233               		.cfi_offset 17, -9
 234 00e0 CF93      		push r28
 235               	.LCFI21:
 236               		.cfi_def_cfa_offset 11
 237               		.cfi_offset 28, -10
 238 00e2 DF93      		push r29
 239               	.LCFI22:
 240               		.cfi_def_cfa_offset 12
 241               		.cfi_offset 29, -11
 242 00e4 1F92      		push __zero_reg__
 243               	.LCFI23:
 244               		.cfi_def_cfa_offset 13
 245 00e6 CDB7      		in r28,__SP_L__
 246 00e8 DEB7      		in r29,__SP_H__
 247               	.LCFI24:
 248               		.cfi_def_cfa_register 28
 249               	/* prologue: function */
 250               	/* frame size = 1 */
 251               	/* stack size = 11 */
 252               	.L__stack_usage = 11
 253 00ea 7B01      		movw r14,r22
  31:main.c        **** int first=arr_char_to_int(first_arg);
 254               		.loc 1 31 0
 255 00ec 4983      		std Y+1,r20
 256 00ee 0E94 0000 		call arr_char_to_int
 257               	.LVL22:
 258 00f2 8C01      		movw r16,r24
 259               	.LVL23:
  32:main.c        **** int second=arr_char_to_int(sec_arg);
 260               		.loc 1 32 0
 261 00f4 C701      		movw r24,r14
 262 00f6 0E94 0000 		call arr_char_to_int
 263               	.LVL24:
 264 00fa 5C01      		movw r10,r24
 265               	.LVL25:
  33:main.c        **** switch(op){
 266               		.loc 1 33 0
 267 00fc 4981      		ldd r20,Y+1
 268               	.LVL26:
 269 00fe 4D32      		cpi r20,lo8(45)
 270 0100 01F0      		breq .L10
 271 0102 00F4      		brsh .L11
 272 0104 4B32      		cpi r20,lo8(43)
 273 0106 01F4      		brne .L15
  34:main.c        **** case '+':
  35:main.c        ****   return first+second;
 274               		.loc 1 35 0
 275 0108 B801      		movw r22,r16
 276 010a 680F      		add r22,r24
 277 010c 791F      		adc r23,r25
 278 010e 00C0      		rjmp .L16
 279               	.L11:
  33:main.c        **** switch(op){
 280               		.loc 1 33 0
 281 0110 4F32      		cpi r20,lo8(47)
 282 0112 01F0      		breq .L13
 283 0114 4837      		cpi r20,lo8(120)
 284 0116 01F4      		brne .L15
  36:main.c        **** case '-':
  37:main.c        ****   return first-second;
  38:main.c        **** case 'x':
  39:main.c        ****   return (1.00*first)*(1.00*second);
 285               		.loc 1 39 0
 286 0118 B801      		movw r22,r16
 287 011a 110F      		lsl r17
 288 011c 880B      		sbc r24,r24
 289 011e 990B      		sbc r25,r25
 290 0120 0E94 0000 		call __floatsisf
 291               	.LVL27:
 292 0124 6B01      		movw r12,r22
 293 0126 7C01      		movw r14,r24
 294 0128 B501      		movw r22,r10
 295 012a BB0C      		lsl r11
 296 012c 880B      		sbc r24,r24
 297 012e 990B      		sbc r25,r25
 298 0130 0E94 0000 		call __floatsisf
 299               	.LVL28:
 300 0134 9B01      		movw r18,r22
 301 0136 AC01      		movw r20,r24
 302 0138 C701      		movw r24,r14
 303 013a B601      		movw r22,r12
 304 013c 0E94 0000 		call __mulsf3
 305               	.LVL29:
 306 0140 00C0      		rjmp .L9
 307               	.LVL30:
 308               	.L10:
  37:main.c        **** case 'x':
 309               		.loc 1 37 0
 310 0142 B801      		movw r22,r16
 311 0144 681B      		sub r22,r24
 312 0146 790B      		sbc r23,r25
 313               	.L16:
 314 0148 072E      		mov __tmp_reg__,r23
 315 014a 000C      		lsl r0
 316 014c 880B      		sbc r24,r24
 317 014e 990B      		sbc r25,r25
 318 0150 0E94 0000 		call __floatsisf
 319               	.LVL31:
 320 0154 00C0      		rjmp .L9
 321               	.LVL32:
 322               	.L13:
  40:main.c        **** case '/':
  41:main.c        ****   return (1.00*first)/(1.00*second);
 323               		.loc 1 41 0
 324 0156 B801      		movw r22,r16
 325 0158 110F      		lsl r17
 326 015a 880B      		sbc r24,r24
 327 015c 990B      		sbc r25,r25
 328 015e 0E94 0000 		call __floatsisf
 329               	.LVL33:
 330 0162 6B01      		movw r12,r22
 331 0164 7C01      		movw r14,r24
 332 0166 B501      		movw r22,r10
 333 0168 BB0C      		lsl r11
 334 016a 880B      		sbc r24,r24
 335 016c 990B      		sbc r25,r25
 336 016e 0E94 0000 		call __floatsisf
 337               	.LVL34:
 338 0172 9B01      		movw r18,r22
 339 0174 AC01      		movw r20,r24
 340 0176 C701      		movw r24,r14
 341 0178 B601      		movw r22,r12
 342 017a 0E94 0000 		call __divsf3
 343               	.LVL35:
 344 017e 00C0      		rjmp .L9
 345               	.LVL36:
 346               	.L15:
  42:main.c        **** 
  43:main.c        **** }
  44:main.c        **** return -5;
 347               		.loc 1 44 0
 348 0180 60E0      		ldi r22,0
 349 0182 70E0      		ldi r23,0
 350 0184 80EA      		ldi r24,lo8(-96)
 351 0186 90EC      		ldi r25,lo8(-64)
 352               	.LVL37:
 353               	.L9:
 354               	/* epilogue start */
  45:main.c        **** }
 355               		.loc 1 45 0
 356 0188 0F90      		pop __tmp_reg__
 357 018a DF91      		pop r29
 358 018c CF91      		pop r28
 359 018e 1F91      		pop r17
 360 0190 0F91      		pop r16
 361               	.LVL38:
 362 0192 FF90      		pop r15
 363 0194 EF90      		pop r14
 364               	.LVL39:
 365 0196 DF90      		pop r13
 366 0198 CF90      		pop r12
 367 019a BF90      		pop r11
 368 019c AF90      		pop r10
 369               	.LVL40:
 370 019e 0895      		ret
 371               		.cfi_endproc
 372               	.LFE11:
 374               	.global	__ltsf2
 375               		.section	.text.startup,"ax",@progbits
 376               	.global	main
 378               	main:
 379               	.LFB12:
  46:main.c        **** 
  47:main.c        **** int main(void){
 380               		.loc 1 47 0
 381               		.cfi_startproc
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 0 */
 385               	.L__stack_usage = 0
  48:main.c        **** //DDRC=0xff;
  49:main.c        **** LCD_DDR=0xff;
 386               		.loc 1 49 0
 387 0000 8FEF      		ldi r24,lo8(-1)
 388 0002 84B9      		out 0x4,r24
  50:main.c        **** ctrl_DDR=0x07;
 389               		.loc 1 50 0
 390 0004 87E0      		ldi r24,lo8(7)
 391 0006 87B9      		out 0x7,r24
  51:main.c        **** init_LCD();
 392               		.loc 1 51 0
 393 0008 0E94 0000 		call init_LCD
 394               	.LVL41:
 395               	.LBB9:
 396               	.LBB10:
 397               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 398               		.loc 2 163 0
 399 000c 83ED      		ldi r24,lo8(12499)
 400 000e 90E3      		ldi r25,hi8(12499)
 401 0010 0197      	1:	sbiw r24,1
 402 0012 01F4      		brne 1b
 403 0014 00C0      		rjmp .
 404 0016 0000      		nop
 405               	.LBE10:
 406               	.LBE9:
  52:main.c        **** _delay_ms(50);
  53:main.c        **** //LCD_write_string("hello world");
  54:main.c        **** unsigned char * first_arg=malloc(no_digits*sizeof(unsigned char));   
 407               		.loc 1 54 0
 408 0018 8AE0      		ldi r24,lo8(10)
 409 001a 90E0      		ldi r25,0
 410 001c 0E94 0000 		call malloc
 411               	.LVL42:
 412 0020 6C01      		movw r12,r24
 413               	.LVL43:
  55:main.c        **** unsigned char * sec_arg=malloc(no_digits*sizeof(unsigned char));   
 414               		.loc 1 55 0
 415 0022 8AE0      		ldi r24,lo8(10)
 416 0024 90E0      		ldi r25,0
 417 0026 0E94 0000 		call malloc
 418               	.LVL44:
 419 002a 5C01      		movw r10,r24
 420               	.LVL45:
  56:main.c        **** int index_first=0;
  57:main.c        **** int index_sec=0;
  58:main.c        **** int flag=0;
 421               		.loc 1 58 0
 422 002c E12C      		mov r14,__zero_reg__
 423 002e F12C      		mov r15,__zero_reg__
 424               	.LVL46:
 425               	.L44:
  57:main.c        **** int flag=0;
 426               		.loc 1 57 0
 427 0030 00E0      		ldi r16,0
 428 0032 10E0      		ldi r17,0
  56:main.c        **** int index_first=0;
 429               		.loc 1 56 0
 430 0034 C0E0      		ldi r28,0
 431 0036 D0E0      		ldi r29,0
 432               	.LVL47:
 433               	.L18:
 434               	.LBB11:
  59:main.c        **** unsigned char op;
  60:main.c        **** double result;
  61:main.c        **** while(1){
  62:main.c        **** 
  63:main.c        **** unsigned char key= pressed_key();
 435               		.loc 1 63 0
 436 0038 0E94 0000 		call pressed_key
 437               	.LVL48:
 438 003c 982F      		mov r25,r24
 439               	.LVL49:
  64:main.c        **** if((key !='+') &&(key!='-')&&(key !='x') &&(key!='=')&&(key !='/') && (key!='c')){
 440               		.loc 1 64 0
 441 003e 8B7F      		andi r24,lo8(-5)
 442               	.LVL50:
 443 0040 8B32      		cpi r24,lo8(43)
 444 0042 01F0      		breq .L19
 445               		.loc 1 64 0 is_stmt 0
 446 0044 892F      		mov r24,r25
 447 0046 8F7E      		andi r24,lo8(-17)
 448 0048 8D32      		cpi r24,lo8(45)
 449 004a 01F0      		breq .L19
 450               		.loc 1 64 0
 451 004c 9837      		cpi r25,lo8(120)
 452 004e 01F0      		breq .L19
 453               		.loc 1 64 0
 454 0050 9336      		cpi r25,lo8(99)
 455 0052 01F0      		breq .L19
  65:main.c        ****   if(flag==0){
 456               		.loc 1 65 0 is_stmt 1
 457 0054 E114      		cp r14,__zero_reg__
 458 0056 F104      		cpc r15,__zero_reg__
 459 0058 01F4      		brne .L20
  66:main.c        ****     first_arg[index_first++]=key;
 460               		.loc 1 66 0
 461 005a 9E01      		movw r18,r28
 462 005c 2F5F      		subi r18,-1
 463 005e 3F4F      		sbci r19,-1
 464               	.LVL51:
 465 0060 CC0D      		add r28,r12
 466 0062 DD1D      		adc r29,r13
 467 0064 9883      		st Y,r25
  67:main.c        ****     first_arg[index_first]='\0';
 468               		.loc 1 67 0
 469 0066 F601      		movw r30,r12
 470 0068 E20F      		add r30,r18
 471 006a F31F      		adc r31,r19
 472 006c 1082      		st Z,__zero_reg__
  66:main.c        ****     first_arg[index_first++]=key;
 473               		.loc 1 66 0
 474 006e E901      		movw r28,r18
 475 0070 00C0      		rjmp .L21
 476               	.LVL52:
 477               	.L20:
  68:main.c        ****              }
  69:main.c        ****   else{
  70:main.c        ****    sec_arg[index_sec++]=key;
 478               		.loc 1 70 0
 479 0072 9801      		movw r18,r16
 480 0074 2F5F      		subi r18,-1
 481 0076 3F4F      		sbci r19,-1
 482               	.LVL53:
 483 0078 F501      		movw r30,r10
 484 007a E00F      		add r30,r16
 485 007c F11F      		adc r31,r17
 486 007e 9083      		st Z,r25
  71:main.c        ****    sec_arg[index_sec]='\0';
 487               		.loc 1 71 0
 488 0080 F501      		movw r30,r10
 489 0082 E20F      		add r30,r18
 490 0084 F31F      		adc r31,r19
 491 0086 1082      		st Z,__zero_reg__
  70:main.c        ****    sec_arg[index_sec]='\0';
 492               		.loc 1 70 0
 493 0088 8901      		movw r16,r18
 494 008a 00C0      		rjmp .L21
 495               	.LVL54:
 496               	.L19:
  72:main.c        ****       }
  73:main.c        ****          }
  74:main.c        **** else if((key=='+')||(key=='*')||(key=='-')||(key=='x')||(key=='/')){
 497               		.loc 1 74 0
 498 008c 86ED      		ldi r24,lo8(-42)
 499 008e 890F      		add r24,r25
 500 0090 8230      		cpi r24,lo8(2)
 501 0092 00F4      		brsh .+2
 502 0094 00C0      		rjmp .L22
 503               		.loc 1 74 0 is_stmt 0
 504 0096 9D32      		cpi r25,lo8(45)
 505 0098 01F4      		brne .+2
 506 009a 00C0      		rjmp .L28
 507               		.loc 1 74 0
 508 009c 9837      		cpi r25,lo8(120)
 509 009e 01F4      		brne .+2
 510 00a0 00C0      		rjmp .L29
 511               		.loc 1 74 0
 512 00a2 9F32      		cpi r25,lo8(47)
 513 00a4 01F4      		brne .+2
 514 00a6 00C0      		rjmp .L30
  75:main.c        **** op=key;
  76:main.c        **** flag=1;
  77:main.c        **** }
  78:main.c        **** else if(key=='=') {
 515               		.loc 1 78 0 is_stmt 1
 516 00a8 9D33      		cpi r25,lo8(61)
 517 00aa 01F4      		brne .L23
  79:main.c        **** result=calculate(first_arg,sec_arg,op);
 518               		.loc 1 79 0
 519 00ac 492D      		mov r20,r9
 520 00ae B501      		movw r22,r10
 521 00b0 C601      		movw r24,r12
 522 00b2 0E94 0000 		call calculate
 523               	.LVL55:
 524 00b6 2B01      		movw r4,r22
 525 00b8 3C01      		movw r6,r24
 526               	.LVL56:
  80:main.c        **** //LCD_cmd(0x38);
  81:main.c        **** LCD_write(key);
 527               		.loc 1 81 0
 528 00ba 8DE3      		ldi r24,lo8(61)
 529 00bc 0E94 0000 		call LCD_write
 530               	.LVL57:
  82:main.c        **** //LCD_cmd(0x10);
  83:main.c        **** if(result<0){
 531               		.loc 1 83 0
 532 00c0 20E0      		ldi r18,0
 533 00c2 30E0      		ldi r19,0
 534 00c4 A901      		movw r20,r18
 535 00c6 C301      		movw r24,r6
 536 00c8 B201      		movw r22,r4
 537 00ca 0E94 0000 		call __ltsf2
 538               	.LVL58:
 539 00ce 87FF      		sbrs r24,7
 540 00d0 00C0      		rjmp .L24
  84:main.c        **** LCD_write('-');
 541               		.loc 1 84 0
 542 00d2 8DE2      		ldi r24,lo8(45)
 543 00d4 0E94 0000 		call LCD_write
 544               	.LVL59:
  85:main.c        **** result*=-1;
 545               		.loc 1 85 0
 546 00d8 77FA      		bst r7,7
 547 00da 7094      		com r7
 548 00dc 77F8      		bld r7,7
 549 00de 7094      		com r7
 550               	.LVL60:
 551               	.L24:
  86:main.c        **** }
  87:main.c        **** //result*=-1;
  88:main.c        **** //LCD_write_int(result);
  89:main.c        **** LCD_write_double(result);
 552               		.loc 1 89 0
 553 00e0 C301      		movw r24,r6
 554 00e2 B201      		movw r22,r4
 555 00e4 0E94 0000 		call LCD_write_double
 556               	.LVL61:
 557 00e8 00C0      		rjmp .L45
 558               	.LVL62:
 559               	.L23:
  90:main.c        **** _delay_ms(2000);
  91:main.c        **** }
  92:main.c        **** else if(key=='c') {
 560               		.loc 1 92 0
 561 00ea 9336      		cpi r25,lo8(99)
 562 00ec 01F4      		brne .L21
  93:main.c        **** LCD_cmd(0x01);
 563               		.loc 1 93 0
 564 00ee 81E0      		ldi r24,lo8(1)
 565 00f0 0E94 0000 		call LCD_cmd
 566               	.LVL63:
 567 00f4 00C0      		rjmp .L44
 568               	.LVL64:
 569               	.L21:
  94:main.c        **** index_first=0;
  95:main.c        **** index_sec=0;
  96:main.c        **** }
  97:main.c        **** if(key!='c' && key!='='){
 570               		.loc 1 97 0
 571 00f6 9D33      		cpi r25,lo8(61)
 572 00f8 01F4      		brne .+2
 573 00fa 00C0      		rjmp .L18
 574               	.LVL65:
 575               	.L27:
  98:main.c        **** LCD_write(key);
 576               		.loc 1 98 0
 577 00fc 892F      		mov r24,r25
 578 00fe 0E94 0000 		call LCD_write
 579               	.LVL66:
  99:main.c        **** LCD_cmd(0x10);
 580               		.loc 1 99 0
 581 0102 80E1      		ldi r24,lo8(16)
 582 0104 0E94 0000 		call LCD_cmd
 583               	.LVL67:
 584               	.L45:
 585               	.LBB12:
 586               	.LBB13:
 587               		.loc 2 163 0
 588 0108 9FE7      		ldi r25,lo8(399999)
 589 010a 2AE1      		ldi r18,hi8(399999)
 590 010c 86E0      		ldi r24,hlo8(399999)
 591 010e 9150      	1:	subi r25,1
 592 0110 2040      		sbci r18,0
 593 0112 8040      		sbci r24,0
 594 0114 01F4      		brne 1b
 595 0116 00C0      		rjmp .
 596 0118 0000      		nop
 597 011a 00C0      		rjmp .L18
 598               	.LVL68:
 599               	.L28:
 600               	.LBE13:
 601               	.LBE12:
 602 011c 4DE2      		ldi r20,lo8(45)
 603 011e 942E      		mov r9,r20
 604               	.LVL69:
 605 0120 00C0      		rjmp .L46
 606               	.LVL70:
 607               	.L29:
 608 0122 38E7      		ldi r19,lo8(120)
 609 0124 932E      		mov r9,r19
 610               	.LVL71:
 611 0126 00C0      		rjmp .L46
 612               	.LVL72:
 613               	.L30:
 614 0128 2FE2      		ldi r18,lo8(47)
 615 012a 922E      		mov r9,r18
 616               	.LVL73:
 617 012c 00C0      		rjmp .L46
 618               	.LVL74:
 619               	.L22:
 620 012e 992E      		mov r9,r25
 621               	.LVL75:
 622               	.L46:
  76:main.c        **** }
 623               		.loc 1 76 0
 624 0130 EE24      		clr r14
 625 0132 E394      		inc r14
 626 0134 F12C      		mov r15,__zero_reg__
 627               	.LVL76:
 628 0136 00C0      		rjmp .L27
 629               	.LBE11:
 630               		.cfi_endproc
 631               	.LFE12:
 633               		.text
 634               	.Letext0:
 635               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccxfDeKH.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxfDeKH.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxfDeKH.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxfDeKH.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxfDeKH.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxfDeKH.s:16     .text:0000000000000000 arr_char_to_int
     /tmp/ccxfDeKH.s:197    .text:00000000000000d0 calculate
     /tmp/ccxfDeKH.s:378    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__floatsisf
__mulsf3
__addsf3
__fixsfsi
pow
__divsf3
__ltsf2
init_LCD
malloc
pressed_key
LCD_write
LCD_write_double
LCD_cmd

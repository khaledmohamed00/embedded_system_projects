
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  00000a24  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cd  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ce  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029f  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025d  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d7  00000000  00000000  00001e45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  9e:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
}
}

ISR(TIMER1_COMPA_vect) //loop to be executed on counter compare match

{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25

	if (SEC<60)
  b4:	80 91 14 01 	lds	r24, 0x0114
  b8:	90 91 15 01 	lds	r25, 0x0115
  bc:	cc 97       	sbiw	r24, 0x3c	; 60
  be:	4c f4       	brge	.+18     	; 0xd2 <__vector_11+0x2c>

	{

		SEC++;
  c0:	80 91 14 01 	lds	r24, 0x0114
  c4:	90 91 15 01 	lds	r25, 0x0115
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 15 01 	sts	0x0115, r25
  ce:	80 93 14 01 	sts	0x0114, r24

	}
 if (SEC==60)
  d2:	80 91 14 01 	lds	r24, 0x0114
  d6:	90 91 15 01 	lds	r25, 0x0115
  da:	cc 97       	sbiw	r24, 0x3c	; 60
  dc:	99 f4       	brne	.+38     	; 0x104 <__vector_11+0x5e>
 {
	 if (MIN<60)
  de:	80 91 12 01 	lds	r24, 0x0112
  e2:	90 91 13 01 	lds	r25, 0x0113
  e6:	cc 97       	sbiw	r24, 0x3c	; 60
  e8:	4c f4       	brge	.+18     	; 0xfc <__vector_11+0x56>
	 {
		 MIN++;
  ea:	80 91 12 01 	lds	r24, 0x0112
  ee:	90 91 13 01 	lds	r25, 0x0113
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 13 01 	sts	0x0113, r25
  f8:	80 93 12 01 	sts	0x0112, r24
	 }
	 SEC=0;
  fc:	10 92 15 01 	sts	0x0115, r1
 100:	10 92 14 01 	sts	0x0114, r1
 }
 if (MIN==60)
 104:	80 91 12 01 	lds	r24, 0x0112
 108:	90 91 13 01 	lds	r25, 0x0113
 10c:	cc 97       	sbiw	r24, 0x3c	; 60
 10e:	99 f4       	brne	.+38     	; 0x136 <__vector_11+0x90>
 {
	 if (HOU<24)
 110:	80 91 10 01 	lds	r24, 0x0110
 114:	90 91 11 01 	lds	r25, 0x0111
 118:	48 97       	sbiw	r24, 0x18	; 24
 11a:	4c f4       	brge	.+18     	; 0x12e <__vector_11+0x88>
	 {
		 HOU++;
 11c:	80 91 10 01 	lds	r24, 0x0110
 120:	90 91 11 01 	lds	r25, 0x0111
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 11 01 	sts	0x0111, r25
 12a:	80 93 10 01 	sts	0x0110, r24
	 }
	 MIN=0;
 12e:	10 92 13 01 	sts	0x0113, r1
 132:	10 92 12 01 	sts	0x0112, r1
 }
 if (HOU==24)
 136:	80 91 10 01 	lds	r24, 0x0110
 13a:	90 91 11 01 	lds	r25, 0x0111
 13e:	48 97       	sbiw	r24, 0x18	; 24
 140:	21 f4       	brne	.+8      	; 0x14a <__vector_11+0xa4>
 {
	 HOU=0;
 142:	10 92 11 01 	sts	0x0111, r1
 146:	10 92 10 01 	sts	0x0110, r1
 }
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_1>:
ISR(INT0_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	
	int value;
	LCD_Init();
 182:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Init>
	adc_init();
 186:	0e 94 11 01 	call	0x222	; 0x222 <adc_init>
		//lcd_write_string("Temp= ")	;
		//adc_init(); 
		//lcd_write_int((adc_read(0x0)/2)-1);
		//value = ((adc_read(0)*500.0)/1024.0);
		
		value = ((adc_read(0)*4.8828125)/10);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 18 01 	call	0x230	; 0x230 <adc_read>
 190:	bc 01       	movw	r22, r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 66 03 	call	0x6cc	; 0x6cc <__floatunsisf>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e4       	ldi	r19, 0x40	; 64
 19e:	4c e9       	ldi	r20, 0x9C	; 156
 1a0:	50 e4       	ldi	r21, 0x40	; 64
 1a2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__mulsf3>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e2       	ldi	r20, 0x20	; 32
 1ac:	51 e4       	ldi	r21, 0x41	; 65
 1ae:	0e 94 be 02 	call	0x57c	; 0x57c <__divsf3>
 1b2:	0e 94 30 03 	call	0x660	; 0x660 <__fixsfsi>
 1b6:	6b 01       	movw	r12, r22
 1b8:	7c 01       	movw	r14, r24
		if(value!=history)
 1ba:	67 2b       	or	r22, r23
 1bc:	e9 f0       	breq	.+58     	; 0x1f8 <__vector_1+0xa0>
		{ history=value;
		LCD_CmdWrite(0x0E);	      // Display ON cuRSor ON
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
		LCD_CmdWrite(0x01);	      // Clear the LCD
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
		LCD_CmdWrite(0x80);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
		lcd_write_string("Temp= ")	;
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_string>
		//lcd_write_int(value);
		LCD_Integer(value);
 1d8:	c6 01       	movw	r24, r12
 1da:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Integer>
		//LCD_DataWrite(value);
		lcd_write_string(" c ");
 1de:	8b e0       	ldi	r24, 0x0B	; 11
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f e3       	ldi	r18, 0x3F	; 63
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	93 e0       	ldi	r25, 0x03	; 3
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <__vector_1+0x94>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <__vector_1+0x9e>
 1f6:	00 00       	nop
		}
	//}
	
	
	
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <adc_init>:
{
	// Vcc as voltage reference (bits76)
	// right adjustment [ADLAR] (bit5)
	// use ADC0 as input        (bits3210)
	//ADMUX = 0b01100000;
	ADMUX = 0b01000000;
 222:	80 e4       	ldi	r24, 0x40	; 64
 224:	80 93 7c 00 	sts	0x007C, r24
	// initialize ADC       (bit6)
	// no autotrigger       (bit5)
	// don't clear int-flag (bit4)
	// no interrupt         (bit3)
	// clock div by 64@8Mhz=125KHz (bit210) ADC should run at 50kHz to 200kHz, 1MHz gives decreased resolution
	ADCSRA = 0b10000011;
 228:	83 e8       	ldi	r24, 0x83	; 131
 22a:	80 93 7a 00 	sts	0x007A, r24
 22e:	08 95       	ret

00000230 <adc_read>:
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	// AREF = AVcc
	//ADC_MUX = MUX_REF_VCC | (_ch & 0x07);
	ADMUX = (ADMUX & 0xE0) | (_ch & 0x1F);
 230:	90 91 7c 00 	lds	r25, 0x007C
 234:	8f 71       	andi	r24, 0x1F	; 31
 236:	90 7e       	andi	r25, 0xE0	; 224
 238:	89 2b       	or	r24, r25
 23a:	80 93 7c 00 	sts	0x007C, r24

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 23e:	80 91 7a 00 	lds	r24, 0x007A
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 93 7a 00 	sts	0x007A, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while((ADCSRA & (1<<ADSC)) != 0);
 248:	80 91 7a 00 	lds	r24, 0x007A
 24c:	86 fd       	sbrc	r24, 6
 24e:	fc cf       	rjmp	.-8      	; 0x248 <adc_read+0x18>
	//high = ADCH;

	// combine the two bytes
	//return (high << 8) | low;
	//return (ADCH);
	return (ADCW);
 250:	80 91 78 00 	lds	r24, 0x0078
 254:	90 91 79 00 	lds	r25, 0x0079
}
 258:	08 95       	ret

0000025a <LCD_CmdWrite>:
   LCD_CmdWrite(0x80);	      // Move the CuRSor to FiRSt line FiRSt Position
}

void LCD_CmdWrite( char cmd)
{
	databus = (cmd & 0xF0);        // SENd the Higher Nibble of the command to LCD
 25a:	98 2f       	mov	r25, r24
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	9b b9       	out	0x0b, r25	; 11
    control_bus &= ~(1<<RS);  // Select the Command Register by pulling RS LOW
 260:	44 98       	cbi	0x08, 4	; 8
    control_bus |= 1<<EN;     // SENd a High-to-Low Pusle at Enable Pin
 262:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	00 00       	nop
	_delay_us(1);
    control_bus &= ~(1<<EN);
 266:	45 98       	cbi	0x08, 5	; 8
 268:	23 e0       	ldi	r18, 0x03	; 3
 26a:	2a 95       	dec	r18
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_CmdWrite+0x10>
 26e:	00 00       	nop

    _delay_us(10);				// wait for some time

    databus = ((cmd<<4) & 0xF0);   // SENd the Lower Nibble of the command to LCD
 270:	20 e1       	ldi	r18, 0x10	; 16
 272:	82 9f       	mul	r24, r18
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	8b b9       	out	0x0b, r24	; 11
    control_bus &=~(1<<RS);  // Select the Command Register by pulling RS LOW
 27a:	44 98       	cbi	0x08, 4	; 8
    control_bus |=1<<EN;     // SENd a High-to-Low Pusle at Enable Pin
 27c:	45 9a       	sbi	0x08, 5	; 8
 27e:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
 280:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_CmdWrite+0x2c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_CmdWrite+0x32>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <LCD_Init>:
 290:	83 ed       	ldi	r24, 0xD3	; 211
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_Init+0x4>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_Init+0xa>
 29a:	00 00       	nop
int pow_(int x, int y);

void LCD_Init()
{
   _delay_ms(50);
   databus_direction |= 0xF0;  // Configure both databus and controlbus as output
 29c:	8a b1       	in	r24, 0x0a	; 10
 29e:	80 6f       	ori	r24, 0xF0	; 240
 2a0:	8a b9       	out	0x0a, r24	; 10
   control_direction |= (1<<RS);
 2a2:	3c 9a       	sbi	0x07, 4	; 7
   control_direction |= (1<<EN);
 2a4:	3d 9a       	sbi	0x07, 5	; 7
   LCD_CmdWrite(0x02);	       //Initilize the LCD in 4bit Mode
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
   LCD_CmdWrite(0x28);
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
   LCD_CmdWrite(0x0E);	      // Display ON cuRSor ON
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
   LCD_CmdWrite(0x01);	      // Clear the LCD
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
   LCD_CmdWrite(0x80);	      // Move the CuRSor to FiRSt line FiRSt Position
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <LCD_CmdWrite>

000002c4 <LCD_DataWrite>:
   _delay_ms(1);
}

void LCD_DataWrite( char dat)
{
    databus = (dat & 0xF0);	  // SENd the Higher Nibble of the Data to LCD
 2c4:	98 2f       	mov	r25, r24
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	9b b9       	out	0x0b, r25	; 11
    control_bus |= (1<<RS);	  // Select the Data Register by pulling RS HIGH
 2ca:	44 9a       	sbi	0x08, 4	; 8
    control_bus |= (1<<EN);	  // SENd a High-to-Low Pusle at Enable Pin
 2cc:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
 2d0:	45 98       	cbi	0x08, 5	; 8
 2d2:	23 e0       	ldi	r18, 0x03	; 3
 2d4:	2a 95       	dec	r18
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_DataWrite+0x10>
 2d8:	00 00       	nop
    _delay_us(10);

	databus = ((dat <<4) & 0xF0); // SENd the Lower Nibble of the Data to LCD
 2da:	20 e1       	ldi	r18, 0x10	; 16
 2dc:	82 9f       	mul	r24, r18
 2de:	c0 01       	movw	r24, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	8b b9       	out	0x0b, r24	; 11
    control_bus |= (1<<RS);	   // Select the Data Register by pulling RS HIGH
 2e4:	44 9a       	sbi	0x08, 4	; 8
    control_bus |= (1<<EN);	   // SENd a High-to-Low Pusle at Enable Pin
 2e6:	45 9a       	sbi	0x08, 5	; 8
 2e8:	00 00       	nop
	_delay_us(1);
    control_bus &=~(1<<EN);
 2ea:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_DataWrite+0x2c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_DataWrite+0x32>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <lcd_write_string>:
    _delay_ms(1);

}

void lcd_write_string(char* str1)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	ec 01       	movw	r28, r24
	int i=0;
	while(str1[i] != '\0')
 300:	89 91       	ld	r24, Y+
 302:	88 23       	and	r24, r24
 304:	19 f0       	breq	.+6      	; 0x30c <lcd_write_string+0x12>
	{
		LCD_DataWrite(str1[i++]);
 306:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_DataWrite>
 30a:	fa cf       	rjmp	.-12     	; 0x300 <lcd_write_string+0x6>
	for(i = 0; i < strlen(str1); i++)
	{
		LCD_DataWrite(str1[i]);
	}
	*/
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <LCD_Integer>:
void LCD_Integer(int data)
// displays the integer value of DATA at current LCD cursor position
{int i=0;
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	28 97       	sbiw	r28, 0x08	; 8
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
	char st[8] = ""; // save enough space for result
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	1a 82       	std	Y+2, r1	; 0x02
 32e:	1b 82       	std	Y+3, r1	; 0x03
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	1d 82       	std	Y+5, r1	; 0x05
 334:	1e 82       	std	Y+6, r1	; 0x06
 336:	1f 82       	std	Y+7, r1	; 0x07
 338:	18 86       	std	Y+8, r1	; 0x08
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 33a:	4a e0       	ldi	r20, 0x0A	; 10
 33c:	be 01       	movw	r22, r28
 33e:	6f 5f       	subi	r22, 0xFF	; 255
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	0e 94 89 04 	call	0x912	; 0x912 <__itoa_ncheck>
 346:	8e 01       	movw	r16, r28
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
	itoa(data,st,10); // convert to ascii
	while(st[i]!='\0')
 34c:	f8 01       	movw	r30, r16
 34e:	81 91       	ld	r24, Z+
 350:	8f 01       	movw	r16, r30
 352:	88 23       	and	r24, r24
 354:	19 f0       	breq	.+6      	; 0x35c <LCD_Integer+0x4a>
	LCD_DataWrite(st[i++]); // display in on LCD
 356:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_DataWrite>
 35a:	f8 cf       	rjmp	.-16     	; 0x34c <LCD_Integer+0x3a>
}
 35c:	28 96       	adiw	r28, 0x08	; 8
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <lcd_write_int>:
void lcd_write_int(int val)
{
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	8c 01       	movw	r16, r24
 37e:	23 e0       	ldi	r18, 0x03	; 3
 380:	30 e0       	ldi	r19, 0x00	; 0
int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
	{
		f = f * x;
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	f8 2e       	mov	r15, r24
	}
}

int pow_(int x, int y)
{
	int i, f = 1;
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	70 e0       	ldi	r23, 0x00	; 0
	for(i = 0; i < y; i++)
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	82 17       	cp	r24, r18
 390:	93 07       	cpc	r25, r19
 392:	41 f0       	breq	.+16     	; 0x3a4 <lcd_write_int+0x32>
	{
		f = f * x;
 394:	ab 01       	movw	r20, r22
 396:	f4 9e       	mul	r15, r20
 398:	b0 01       	movw	r22, r0
 39a:	f5 9e       	mul	r15, r21
 39c:	70 0d       	add	r23, r0
 39e:	11 24       	eor	r1, r1
}

int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	f5 cf       	rjmp	.-22     	; 0x38e <lcd_write_int+0x1c>
	int i;
	//sprintf(str, "%d", val);
	//lcd_write_string(str);
	for(i = 0; i < 4; i++)
	{
		str[i] = (val / pow_(10,3-i)) + 0x30;
 3a4:	c8 01       	movw	r24, r16
 3a6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 3aa:	40 e3       	ldi	r20, 0x30	; 48
 3ac:	46 0f       	add	r20, r22
	}
}

int pow_(int x, int y)
{
	int i, f = 1;
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	70 e0       	ldi	r23, 0x00	; 0
	for(i = 0; i < y; i++)
 3b2:	c0 e0       	ldi	r28, 0x00	; 0
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	c2 17       	cp	r28, r18
 3b8:	d3 07       	cpc	r29, r19
 3ba:	41 f0       	breq	.+16     	; 0x3cc <lcd_write_int+0x5a>
	{
		f = f * x;
 3bc:	cb 01       	movw	r24, r22
 3be:	f8 9e       	mul	r15, r24
 3c0:	b0 01       	movw	r22, r0
 3c2:	f9 9e       	mul	r15, r25
 3c4:	70 0d       	add	r23, r0
 3c6:	11 24       	eor	r1, r1
}

int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
 3c8:	21 96       	adiw	r28, 0x01	; 1
 3ca:	f5 cf       	rjmp	.-22     	; 0x3b6 <lcd_write_int+0x44>
	//sprintf(str, "%d", val);
	//lcd_write_string(str);
	for(i = 0; i < 4; i++)
	{
		str[i] = (val / pow_(10,3-i)) + 0x30;
		val = val % pow_(10,3-i);
 3cc:	c8 01       	movw	r24, r16
 3ce:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 3d2:	8c 01       	movw	r16, r24
		LCD_DataWrite(str[i]);
 3d4:	84 2f       	mov	r24, r20
 3d6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_DataWrite>
 3da:	9e 01       	movw	r18, r28
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	31 09       	sbc	r19, r1
 3e0:	90 f6       	brcc	.-92     	; 0x386 <lcd_write_int+0x14>
	}
}
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	08 95       	ret

000003ee <pow_>:

int pow_(int x, int y)
{
 3ee:	ac 01       	movw	r20, r24
	int i, f = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0; i < y; i++)
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	26 17       	cp	r18, r22
 3fa:	37 07       	cpc	r19, r23
 3fc:	5c f4       	brge	.+22     	; 0x414 <pow_+0x26>
	{
		f = f * x;
 3fe:	fc 01       	movw	r30, r24
 400:	e4 9f       	mul	r30, r20
 402:	c0 01       	movw	r24, r0
 404:	e5 9f       	mul	r30, r21
 406:	90 0d       	add	r25, r0
 408:	f4 9f       	mul	r31, r20
 40a:	90 0d       	add	r25, r0
 40c:	11 24       	eor	r1, r1
}

int pow_(int x, int y)
{
	int i, f = 1;
	for(i = 0; i < y; i++)
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	f2 cf       	rjmp	.-28     	; 0x3f8 <pow_+0xa>
	{
		f = f * x;
	}
	return f;
}
 414:	08 95       	ret

00000416 <main>:
		//LCD_DataWrite(value);
		lcd_write_string(" c ");
	//LCD_CmdWrite(0x01);
		}
	}*/
DDRD&=~(1<<DDD2);
 416:	52 98       	cbi	0x0a, 2	; 10
PORTD|=(1<<PORTD2);
 418:	5a 9a       	sbi	0x0b, 2	; 11
EICRA|=(1<<ISC00);
 41a:	80 91 69 00 	lds	r24, 0x0069
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	80 93 69 00 	sts	0x0069, r24
EIMSK|=(1<<INT0);	
 424:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 426:	78 94       	sei
	DDRB=0xf0;
 428:	80 ef       	ldi	r24, 0xF0	; 240
 42a:	84 b9       	out	0x04, r24	; 4
	PORTB=0x0f;
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	85 b9       	out	0x05, r24	; 5
LCD_Init();
 430:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Init>
TCCR1B |=(1<<CS12)|(1<<CS10)|(1<<WGM12);// setting prescale and CTC mode
 434:	80 91 81 00 	lds	r24, 0x0081
 438:	8d 60       	ori	r24, 0x0D	; 13
 43a:	80 93 81 00 	sts	0x0081, r24

//OCR1A=10800;//setting compare value equal to counter clock frequency to get an interrupt every second
OCR1A=0x3d0;
 43e:	80 ed       	ldi	r24, 0xD0	; 208
 440:	93 e0       	ldi	r25, 0x03	; 3
 442:	90 93 89 00 	sts	0x0089, r25
 446:	80 93 88 00 	sts	0x0088, r24
//OCR1A=0xff;

//sei();// enabling global interrupts
//int val=TCNT0_1;
TIMSK1 |=(1<<OCIE1A);//compare match interrupt enable
 44a:	80 91 6f 00 	lds	r24, 0x006F
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	80 93 6f 00 	sts	0x006F, r24
	{_delay_ms(100);
		if ((PINB & (1<<PINB0))==0)
		{
			
		
		MIN=(MIN+1)%60;
 454:	cc e3       	ldi	r28, 0x3C	; 60
 456:	d0 e0       	ldi	r29, 0x00	; 0
	{_delay_ms(100);
		if ((PINB & (1<<PINB1))==0)
		{
			
			
		HOU=(HOU+1)%24;
 458:	08 e1       	ldi	r16, 0x18	; 24
 45a:	10 e0       	ldi	r17, 0x00	; 0

//sei();// enabling global interrupts
//int val=TCNT0_1;
TIMSK1 |=(1<<OCIE1A);//compare match interrupt enable
while(1)
{ if ((PINB & (1<<PINB0))==0)
 45c:	18 99       	sbic	0x03, 0	; 3
 45e:	14 c0       	rjmp	.+40     	; 0x488 <main+0x72>
 460:	87 ea       	ldi	r24, 0xA7	; 167
 462:	91 e6       	ldi	r25, 0x61	; 97
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <main+0x4e>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x54>
 46a:	00 00       	nop
	{_delay_ms(100);
		if ((PINB & (1<<PINB0))==0)
 46c:	18 99       	sbic	0x03, 0	; 3
 46e:	0c c0       	rjmp	.+24     	; 0x488 <main+0x72>
		{
			
		
		MIN=(MIN+1)%60;
 470:	80 91 12 01 	lds	r24, 0x0112
 474:	90 91 13 01 	lds	r25, 0x0113
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	be 01       	movw	r22, r28
 47c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 480:	90 93 13 01 	sts	0x0113, r25
 484:	80 93 12 01 	sts	0x0112, r24
		}
	}
	if ((PINB & (1<<PINB1))==0)
 488:	19 99       	sbic	0x03, 1	; 3
 48a:	14 c0       	rjmp	.+40     	; 0x4b4 <main+0x9e>
 48c:	87 ea       	ldi	r24, 0xA7	; 167
 48e:	91 e6       	ldi	r25, 0x61	; 97
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <main+0x7a>
 494:	00 c0       	rjmp	.+0      	; 0x496 <main+0x80>
 496:	00 00       	nop
	{_delay_ms(100);
		if ((PINB & (1<<PINB1))==0)
 498:	19 99       	sbic	0x03, 1	; 3
 49a:	0c c0       	rjmp	.+24     	; 0x4b4 <main+0x9e>
		{
			
			
		HOU=(HOU+1)%24;
 49c:	80 91 10 01 	lds	r24, 0x0110
 4a0:	90 91 11 01 	lds	r25, 0x0111
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	b8 01       	movw	r22, r16
 4a8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 4ac:	90 93 11 01 	sts	0x0111, r25
 4b0:	80 93 10 01 	sts	0x0110, r24
	}
	}
	if ((PINB & (1<<PINB2))==0)
 4b4:	1a 99       	sbic	0x03, 2	; 3
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <main+0xd8>
	{ if(MIN>0)
 4b8:	80 91 12 01 	lds	r24, 0x0112
 4bc:	90 91 13 01 	lds	r25, 0x0113
 4c0:	18 16       	cp	r1, r24
 4c2:	19 06       	cpc	r1, r25
 4c4:	a4 f4       	brge	.+40     	; 0x4ee <main+0xd8>
 4c6:	87 ea       	ldi	r24, 0xA7	; 167
 4c8:	91 e6       	ldi	r25, 0x61	; 97
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <main+0xb4>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <main+0xba>
 4d0:	00 00       	nop
		{_delay_ms(100);
			if ((PINB & (1<<PINB2))==0)
 4d2:	1a 99       	sbic	0x03, 2	; 3
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <main+0xd8>
			
			{
				
				
		MIN=(MIN-1)%60;
 4d6:	80 91 12 01 	lds	r24, 0x0112
 4da:	90 91 13 01 	lds	r25, 0x0113
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	be 01       	movw	r22, r28
 4e2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 4e6:	90 93 13 01 	sts	0x0113, r25
 4ea:	80 93 12 01 	sts	0x0112, r24
			}
	}
	}
	if ((PINB & (1<<PINB3))==0)
 4ee:	1b 99       	sbic	0x03, 3	; 3
 4f0:	1b c0       	rjmp	.+54     	; 0x528 <main+0x112>
	{ if(HOU>0)
 4f2:	80 91 10 01 	lds	r24, 0x0110
 4f6:	90 91 11 01 	lds	r25, 0x0111
 4fa:	18 16       	cp	r1, r24
 4fc:	19 06       	cpc	r1, r25
 4fe:	a4 f4       	brge	.+40     	; 0x528 <main+0x112>
 500:	87 ea       	ldi	r24, 0xA7	; 167
 502:	91 e6       	ldi	r25, 0x61	; 97
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <main+0xee>
 508:	00 c0       	rjmp	.+0      	; 0x50a <main+0xf4>
 50a:	00 00       	nop
		{_delay_ms(100);
			if ((PINB & (1<<PINB3))==0)
 50c:	1b 99       	sbic	0x03, 3	; 3
 50e:	0c c0       	rjmp	.+24     	; 0x528 <main+0x112>
			{
				
				
		HOU=(HOU-1)%24;
 510:	80 91 10 01 	lds	r24, 0x0110
 514:	90 91 11 01 	lds	r25, 0x0111
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	b8 01       	movw	r22, r16
 51c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__divmodhi4>
 520:	90 93 11 01 	sts	0x0111, r25
 524:	80 93 10 01 	sts	0x0110, r24
			}
		}
	}
	//LCD_Init();
	 //LCD_CmdWrite(0x28);
	 LCD_CmdWrite(0x0E);	      // Display ON cuRSor ON
 528:	8e e0       	ldi	r24, 0x0E	; 14
 52a:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
	 LCD_CmdWrite(0x01);	      // Clear the LCD
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
	 LCD_CmdWrite(0x80);
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_CmdWrite>
	//LCD_CmdWrite(0x1C);
	//LCD_CmdWrite(0x08);
	
	LCD_Integer( HOU);
 53a:	80 91 10 01 	lds	r24, 0x0110
 53e:	90 91 11 01 	lds	r25, 0x0111
 542:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Integer>
	lcd_write_string(" : ")	;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_string>
	//lcd_write_int(SEC);
 //LCD_CmdWrite(0x80 + 3);	
//lcd_write_int(SEC);
LCD_Integer(MIN);
 54e:	80 91 12 01 	lds	r24, 0x0112
 552:	90 91 13 01 	lds	r25, 0x0113
 556:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Integer>
// LCD_CmdWrite(0x80 + 3);
  lcd_write_string(" : ")	;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_write_string>

LCD_Integer( SEC);
 562:	80 91 14 01 	lds	r24, 0x0114
 566:	90 91 15 01 	lds	r25, 0x0115
 56a:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Integer>
 56e:	85 ea       	ldi	r24, 0xA5	; 165
 570:	9e e0       	ldi	r25, 0x0E	; 14
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <main+0x15c>
 576:	00 c0       	rjmp	.+0      	; 0x578 <main+0x162>
 578:	00 00       	nop
 57a:	70 cf       	rjmp	.-288    	; 0x45c <main+0x46>

0000057c <__divsf3>:
 57c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divsf3x>
 580:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_round>
 584:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_pscB>
 588:	58 f0       	brcs	.+22     	; 0x5a0 <__divsf3+0x24>
 58a:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_pscA>
 58e:	40 f0       	brcs	.+16     	; 0x5a0 <__divsf3+0x24>
 590:	29 f4       	brne	.+10     	; 0x59c <__divsf3+0x20>
 592:	5f 3f       	cpi	r21, 0xFF	; 255
 594:	29 f0       	breq	.+10     	; 0x5a0 <__divsf3+0x24>
 596:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_inf>
 59a:	51 11       	cpse	r21, r1
 59c:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 5a0:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_nan>

000005a4 <__divsf3x>:
 5a4:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_split3>
 5a8:	68 f3       	brcs	.-38     	; 0x584 <__divsf3+0x8>

000005aa <__divsf3_pse>:
 5aa:	99 23       	and	r25, r25
 5ac:	b1 f3       	breq	.-20     	; 0x59a <__divsf3+0x1e>
 5ae:	55 23       	and	r21, r21
 5b0:	91 f3       	breq	.-28     	; 0x596 <__divsf3+0x1a>
 5b2:	95 1b       	sub	r25, r21
 5b4:	55 0b       	sbc	r21, r21
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	84 07       	cpc	r24, r20
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__divsf3_pse+0x26>
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	44 1f       	adc	r20, r20
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a9 f3       	breq	.-22     	; 0x5ba <__divsf3_pse+0x10>
 5d0:	35 d0       	rcall	.+106    	; 0x63c <__divsf3_pse+0x92>
 5d2:	0e 2e       	mov	r0, r30
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x3a>
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	32 d0       	rcall	.+100    	; 0x63e <__divsf3_pse+0x94>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	e6 95       	lsr	r30
 5e0:	00 1c       	adc	r0, r0
 5e2:	ca f7       	brpl	.-14     	; 0x5d6 <__divsf3_pse+0x2c>
 5e4:	2b d0       	rcall	.+86     	; 0x63c <__divsf3_pse+0x92>
 5e6:	fe 2f       	mov	r31, r30
 5e8:	29 d0       	rcall	.+82     	; 0x63c <__divsf3_pse+0x92>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	bb 1f       	adc	r27, r27
 5f2:	26 17       	cp	r18, r22
 5f4:	37 07       	cpc	r19, r23
 5f6:	48 07       	cpc	r20, r24
 5f8:	ab 07       	cpc	r26, r27
 5fa:	b0 e8       	ldi	r27, 0x80	; 128
 5fc:	09 f0       	breq	.+2      	; 0x600 <__divsf3_pse+0x56>
 5fe:	bb 0b       	sbc	r27, r27
 600:	80 2d       	mov	r24, r0
 602:	bf 01       	movw	r22, r30
 604:	ff 27       	eor	r31, r31
 606:	93 58       	subi	r25, 0x83	; 131
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	3a f0       	brmi	.+14     	; 0x61a <__divsf3_pse+0x70>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	78 f0       	brcs	.+30     	; 0x630 <__divsf3_pse+0x86>
 612:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_inf>
 616:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__divsf3_pse+0x6c>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__divsf3_pse+0x6c>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	c9 f7       	brne	.-14     	; 0x622 <__divsf3_pse+0x78>
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret
 63c:	e1 e0       	ldi	r30, 0x01	; 1
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	bb 1f       	adc	r27, r27
 646:	62 17       	cp	r22, r18
 648:	73 07       	cpc	r23, r19
 64a:	84 07       	cpc	r24, r20
 64c:	ba 07       	cpc	r27, r26
 64e:	20 f0       	brcs	.+8      	; 0x658 <__divsf3_pse+0xae>
 650:	62 1b       	sub	r22, r18
 652:	73 0b       	sbc	r23, r19
 654:	84 0b       	sbc	r24, r20
 656:	ba 0b       	sbc	r27, r26
 658:	ee 1f       	adc	r30, r30
 65a:	88 f7       	brcc	.-30     	; 0x63e <__divsf3_pse+0x94>
 65c:	e0 95       	com	r30
 65e:	08 95       	ret

00000660 <__fixsfsi>:
 660:	0e 94 37 03 	call	0x66e	; 0x66e <__fixunssfsi>
 664:	68 94       	set
 666:	b1 11       	cpse	r27, r1
 668:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 66c:	08 95       	ret

0000066e <__fixunssfsi>:
 66e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fp_splitA>
 672:	88 f0       	brcs	.+34     	; 0x696 <__fixunssfsi+0x28>
 674:	9f 57       	subi	r25, 0x7F	; 127
 676:	98 f0       	brcs	.+38     	; 0x69e <__fixunssfsi+0x30>
 678:	b9 2f       	mov	r27, r25
 67a:	99 27       	eor	r25, r25
 67c:	b7 51       	subi	r27, 0x17	; 23
 67e:	b0 f0       	brcs	.+44     	; 0x6ac <__fixunssfsi+0x3e>
 680:	e1 f0       	breq	.+56     	; 0x6ba <__fixunssfsi+0x4c>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a f0       	brmi	.+6      	; 0x692 <__fixunssfsi+0x24>
 68c:	ba 95       	dec	r27
 68e:	c9 f7       	brne	.-14     	; 0x682 <__fixunssfsi+0x14>
 690:	14 c0       	rjmp	.+40     	; 0x6ba <__fixunssfsi+0x4c>
 692:	b1 30       	cpi	r27, 0x01	; 1
 694:	91 f0       	breq	.+36     	; 0x6ba <__fixunssfsi+0x4c>
 696:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_zero>
 69a:	b1 e0       	ldi	r27, 0x01	; 1
 69c:	08 95       	ret
 69e:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_zero>
 6a2:	67 2f       	mov	r22, r23
 6a4:	78 2f       	mov	r23, r24
 6a6:	88 27       	eor	r24, r24
 6a8:	b8 5f       	subi	r27, 0xF8	; 248
 6aa:	39 f0       	breq	.+14     	; 0x6ba <__fixunssfsi+0x4c>
 6ac:	b9 3f       	cpi	r27, 0xF9	; 249
 6ae:	cc f3       	brlt	.-14     	; 0x6a2 <__fixunssfsi+0x34>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b3 95       	inc	r27
 6b8:	d9 f7       	brne	.-10     	; 0x6b0 <__fixunssfsi+0x42>
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__fixunssfsi+0x5c>
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__floatunsisf>:
 6cc:	e8 94       	clt
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <__floatsisf+0x12>

000006d0 <__floatsisf>:
 6d0:	97 fb       	bst	r25, 7
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__floatsisf+0x12>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	99 23       	and	r25, r25
 6e4:	a9 f0       	breq	.+42     	; 0x710 <__floatsisf+0x40>
 6e6:	f9 2f       	mov	r31, r25
 6e8:	96 e9       	ldi	r25, 0x96	; 150
 6ea:	bb 27       	eor	r27, r27
 6ec:	93 95       	inc	r25
 6ee:	f6 95       	lsr	r31
 6f0:	87 95       	ror	r24
 6f2:	77 95       	ror	r23
 6f4:	67 95       	ror	r22
 6f6:	b7 95       	ror	r27
 6f8:	f1 11       	cpse	r31, r1
 6fa:	f8 cf       	rjmp	.-16     	; 0x6ec <__floatsisf+0x1c>
 6fc:	fa f4       	brpl	.+62     	; 0x73c <__floatsisf+0x6c>
 6fe:	bb 0f       	add	r27, r27
 700:	11 f4       	brne	.+4      	; 0x706 <__floatsisf+0x36>
 702:	60 ff       	sbrs	r22, 0
 704:	1b c0       	rjmp	.+54     	; 0x73c <__floatsisf+0x6c>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	16 c0       	rjmp	.+44     	; 0x73c <__floatsisf+0x6c>
 710:	88 23       	and	r24, r24
 712:	11 f0       	breq	.+4      	; 0x718 <__floatsisf+0x48>
 714:	96 e9       	ldi	r25, 0x96	; 150
 716:	11 c0       	rjmp	.+34     	; 0x73a <__floatsisf+0x6a>
 718:	77 23       	and	r23, r23
 71a:	21 f0       	breq	.+8      	; 0x724 <__floatsisf+0x54>
 71c:	9e e8       	ldi	r25, 0x8E	; 142
 71e:	87 2f       	mov	r24, r23
 720:	76 2f       	mov	r23, r22
 722:	05 c0       	rjmp	.+10     	; 0x72e <__floatsisf+0x5e>
 724:	66 23       	and	r22, r22
 726:	71 f0       	breq	.+28     	; 0x744 <__floatsisf+0x74>
 728:	96 e8       	ldi	r25, 0x86	; 134
 72a:	86 2f       	mov	r24, r22
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	2a f0       	brmi	.+10     	; 0x73c <__floatsisf+0x6c>
 732:	9a 95       	dec	r25
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	da f7       	brpl	.-10     	; 0x732 <__floatsisf+0x62>
 73c:	88 0f       	add	r24, r24
 73e:	96 95       	lsr	r25
 740:	87 95       	ror	r24
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__fp_inf>:
 746:	97 f9       	bld	r25, 7
 748:	9f 67       	ori	r25, 0x7F	; 127
 74a:	80 e8       	ldi	r24, 0x80	; 128
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	08 95       	ret

00000752 <__fp_nan>:
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	80 ec       	ldi	r24, 0xC0	; 192
 756:	08 95       	ret

00000758 <__fp_pscA>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	18 06       	cpc	r1, r24
 762:	09 06       	cpc	r0, r25
 764:	08 95       	ret

00000766 <__fp_pscB>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	12 16       	cp	r1, r18
 76c:	13 06       	cpc	r1, r19
 76e:	14 06       	cpc	r1, r20
 770:	05 06       	cpc	r0, r21
 772:	08 95       	ret

00000774 <__fp_round>:
 774:	09 2e       	mov	r0, r25
 776:	03 94       	inc	r0
 778:	00 0c       	add	r0, r0
 77a:	11 f4       	brne	.+4      	; 0x780 <__fp_round+0xc>
 77c:	88 23       	and	r24, r24
 77e:	52 f0       	brmi	.+20     	; 0x794 <__fp_round+0x20>
 780:	bb 0f       	add	r27, r27
 782:	40 f4       	brcc	.+16     	; 0x794 <__fp_round+0x20>
 784:	bf 2b       	or	r27, r31
 786:	11 f4       	brne	.+4      	; 0x78c <__fp_round+0x18>
 788:	60 ff       	sbrs	r22, 0
 78a:	04 c0       	rjmp	.+8      	; 0x794 <__fp_round+0x20>
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	08 95       	ret

00000796 <__fp_split3>:
 796:	57 fd       	sbrc	r21, 7
 798:	90 58       	subi	r25, 0x80	; 128
 79a:	44 0f       	add	r20, r20
 79c:	55 1f       	adc	r21, r21
 79e:	59 f0       	breq	.+22     	; 0x7b6 <__fp_splitA+0x10>
 7a0:	5f 3f       	cpi	r21, 0xFF	; 255
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__fp_splitA+0x1a>
 7a4:	47 95       	ror	r20

000007a6 <__fp_splitA>:
 7a6:	88 0f       	add	r24, r24
 7a8:	97 fb       	bst	r25, 7
 7aa:	99 1f       	adc	r25, r25
 7ac:	61 f0       	breq	.+24     	; 0x7c6 <__fp_splitA+0x20>
 7ae:	9f 3f       	cpi	r25, 0xFF	; 255
 7b0:	79 f0       	breq	.+30     	; 0x7d0 <__fp_splitA+0x2a>
 7b2:	87 95       	ror	r24
 7b4:	08 95       	ret
 7b6:	12 16       	cp	r1, r18
 7b8:	13 06       	cpc	r1, r19
 7ba:	14 06       	cpc	r1, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	f2 cf       	rjmp	.-28     	; 0x7a4 <__fp_split3+0xe>
 7c0:	46 95       	lsr	r20
 7c2:	f1 df       	rcall	.-30     	; 0x7a6 <__fp_splitA>
 7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <__fp_splitA+0x30>
 7c6:	16 16       	cp	r1, r22
 7c8:	17 06       	cpc	r1, r23
 7ca:	18 06       	cpc	r1, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	f1 cf       	rjmp	.-30     	; 0x7b2 <__fp_splitA+0xc>
 7d0:	86 95       	lsr	r24
 7d2:	71 05       	cpc	r23, r1
 7d4:	61 05       	cpc	r22, r1
 7d6:	08 94       	sec
 7d8:	08 95       	ret

000007da <__fp_zero>:
 7da:	e8 94       	clt

000007dc <__fp_szero>:
 7dc:	bb 27       	eor	r27, r27
 7de:	66 27       	eor	r22, r22
 7e0:	77 27       	eor	r23, r23
 7e2:	cb 01       	movw	r24, r22
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__mulsf3>:
 7e8:	0e 94 07 04 	call	0x80e	; 0x80e <__mulsf3x>
 7ec:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_round>
 7f0:	0e 94 ac 03 	call	0x758	; 0x758 <__fp_pscA>
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__mulsf3+0x1c>
 7f6:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_pscB>
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__mulsf3+0x1c>
 7fc:	95 23       	and	r25, r21
 7fe:	11 f0       	breq	.+4      	; 0x804 <__mulsf3+0x1c>
 800:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_inf>
 804:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_nan>
 808:	11 24       	eor	r1, r1
 80a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>

0000080e <__mulsf3x>:
 80e:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_split3>
 812:	70 f3       	brcs	.-36     	; 0x7f0 <__mulsf3+0x8>

00000814 <__mulsf3_pse>:
 814:	95 9f       	mul	r25, r21
 816:	c1 f3       	breq	.-16     	; 0x808 <__mulsf3+0x20>
 818:	95 0f       	add	r25, r21
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	55 1f       	adc	r21, r21
 81e:	62 9f       	mul	r22, r18
 820:	f0 01       	movw	r30, r0
 822:	72 9f       	mul	r23, r18
 824:	bb 27       	eor	r27, r27
 826:	f0 0d       	add	r31, r0
 828:	b1 1d       	adc	r27, r1
 82a:	63 9f       	mul	r22, r19
 82c:	aa 27       	eor	r26, r26
 82e:	f0 0d       	add	r31, r0
 830:	b1 1d       	adc	r27, r1
 832:	aa 1f       	adc	r26, r26
 834:	64 9f       	mul	r22, r20
 836:	66 27       	eor	r22, r22
 838:	b0 0d       	add	r27, r0
 83a:	a1 1d       	adc	r26, r1
 83c:	66 1f       	adc	r22, r22
 83e:	82 9f       	mul	r24, r18
 840:	22 27       	eor	r18, r18
 842:	b0 0d       	add	r27, r0
 844:	a1 1d       	adc	r26, r1
 846:	62 1f       	adc	r22, r18
 848:	73 9f       	mul	r23, r19
 84a:	b0 0d       	add	r27, r0
 84c:	a1 1d       	adc	r26, r1
 84e:	62 1f       	adc	r22, r18
 850:	83 9f       	mul	r24, r19
 852:	a0 0d       	add	r26, r0
 854:	61 1d       	adc	r22, r1
 856:	22 1f       	adc	r18, r18
 858:	74 9f       	mul	r23, r20
 85a:	33 27       	eor	r19, r19
 85c:	a0 0d       	add	r26, r0
 85e:	61 1d       	adc	r22, r1
 860:	23 1f       	adc	r18, r19
 862:	84 9f       	mul	r24, r20
 864:	60 0d       	add	r22, r0
 866:	21 1d       	adc	r18, r1
 868:	82 2f       	mov	r24, r18
 86a:	76 2f       	mov	r23, r22
 86c:	6a 2f       	mov	r22, r26
 86e:	11 24       	eor	r1, r1
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	50 40       	sbci	r21, 0x00	; 0
 874:	9a f0       	brmi	.+38     	; 0x89c <__mulsf3_pse+0x88>
 876:	f1 f0       	breq	.+60     	; 0x8b4 <__mulsf3_pse+0xa0>
 878:	88 23       	and	r24, r24
 87a:	4a f0       	brmi	.+18     	; 0x88e <__mulsf3_pse+0x7a>
 87c:	ee 0f       	add	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	bb 1f       	adc	r27, r27
 882:	66 1f       	adc	r22, r22
 884:	77 1f       	adc	r23, r23
 886:	88 1f       	adc	r24, r24
 888:	91 50       	subi	r25, 0x01	; 1
 88a:	50 40       	sbci	r21, 0x00	; 0
 88c:	a9 f7       	brne	.-22     	; 0x878 <__mulsf3_pse+0x64>
 88e:	9e 3f       	cpi	r25, 0xFE	; 254
 890:	51 05       	cpc	r21, r1
 892:	80 f0       	brcs	.+32     	; 0x8b4 <__mulsf3_pse+0xa0>
 894:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_inf>
 898:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_szero>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	e4 f3       	brlt	.-8      	; 0x898 <__mulsf3_pse+0x84>
 8a0:	98 3e       	cpi	r25, 0xE8	; 232
 8a2:	d4 f3       	brlt	.-12     	; 0x898 <__mulsf3_pse+0x84>
 8a4:	86 95       	lsr	r24
 8a6:	77 95       	ror	r23
 8a8:	67 95       	ror	r22
 8aa:	b7 95       	ror	r27
 8ac:	f7 95       	ror	r31
 8ae:	e7 95       	ror	r30
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	c1 f7       	brne	.-16     	; 0x8a4 <__mulsf3_pse+0x90>
 8b4:	fe 2b       	or	r31, r30
 8b6:	88 0f       	add	r24, r24
 8b8:	91 1d       	adc	r25, r1
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <__divmodhi4>:
 8c2:	97 fb       	bst	r25, 7
 8c4:	07 2e       	mov	r0, r23
 8c6:	16 f4       	brtc	.+4      	; 0x8cc <__divmodhi4+0xa>
 8c8:	00 94       	com	r0
 8ca:	07 d0       	rcall	.+14     	; 0x8da <__divmodhi4_neg1>
 8cc:	77 fd       	sbrc	r23, 7
 8ce:	09 d0       	rcall	.+18     	; 0x8e2 <__divmodhi4_neg2>
 8d0:	0e 94 75 04 	call	0x8ea	; 0x8ea <__udivmodhi4>
 8d4:	07 fc       	sbrc	r0, 7
 8d6:	05 d0       	rcall	.+10     	; 0x8e2 <__divmodhi4_neg2>
 8d8:	3e f4       	brtc	.+14     	; 0x8e8 <__divmodhi4_exit>

000008da <__divmodhi4_neg1>:
 8da:	90 95       	com	r25
 8dc:	81 95       	neg	r24
 8de:	9f 4f       	sbci	r25, 0xFF	; 255
 8e0:	08 95       	ret

000008e2 <__divmodhi4_neg2>:
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255

000008e8 <__divmodhi4_exit>:
 8e8:	08 95       	ret

000008ea <__udivmodhi4>:
 8ea:	aa 1b       	sub	r26, r26
 8ec:	bb 1b       	sub	r27, r27
 8ee:	51 e1       	ldi	r21, 0x11	; 17
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <__udivmodhi4_ep>

000008f2 <__udivmodhi4_loop>:
 8f2:	aa 1f       	adc	r26, r26
 8f4:	bb 1f       	adc	r27, r27
 8f6:	a6 17       	cp	r26, r22
 8f8:	b7 07       	cpc	r27, r23
 8fa:	10 f0       	brcs	.+4      	; 0x900 <__udivmodhi4_ep>
 8fc:	a6 1b       	sub	r26, r22
 8fe:	b7 0b       	sbc	r27, r23

00000900 <__udivmodhi4_ep>:
 900:	88 1f       	adc	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	5a 95       	dec	r21
 906:	a9 f7       	brne	.-22     	; 0x8f2 <__udivmodhi4_loop>
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	bc 01       	movw	r22, r24
 90e:	cd 01       	movw	r24, r26
 910:	08 95       	ret

00000912 <__itoa_ncheck>:
 912:	bb 27       	eor	r27, r27
 914:	4a 30       	cpi	r20, 0x0A	; 10
 916:	31 f4       	brne	.+12     	; 0x924 <__itoa_ncheck+0x12>
 918:	99 23       	and	r25, r25
 91a:	22 f4       	brpl	.+8      	; 0x924 <__itoa_ncheck+0x12>
 91c:	bd e2       	ldi	r27, 0x2D	; 45
 91e:	90 95       	com	r25
 920:	81 95       	neg	r24
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	0c 94 95 04 	jmp	0x92a	; 0x92a <__utoa_common>

00000928 <__utoa_ncheck>:
 928:	bb 27       	eor	r27, r27

0000092a <__utoa_common>:
 92a:	fb 01       	movw	r30, r22
 92c:	55 27       	eor	r21, r21
 92e:	aa 27       	eor	r26, r26
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	aa 1f       	adc	r26, r26
 936:	a4 17       	cp	r26, r20
 938:	10 f0       	brcs	.+4      	; 0x93e <__utoa_common+0x14>
 93a:	a4 1b       	sub	r26, r20
 93c:	83 95       	inc	r24
 93e:	50 51       	subi	r21, 0x10	; 16
 940:	b9 f7       	brne	.-18     	; 0x930 <__utoa_common+0x6>
 942:	a0 5d       	subi	r26, 0xD0	; 208
 944:	aa 33       	cpi	r26, 0x3A	; 58
 946:	08 f0       	brcs	.+2      	; 0x94a <__utoa_common+0x20>
 948:	a9 5d       	subi	r26, 0xD9	; 217
 94a:	a1 93       	st	Z+, r26
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	79 f7       	brne	.-34     	; 0x92e <__utoa_common+0x4>
 950:	b1 11       	cpse	r27, r1
 952:	b1 93       	st	Z+, r27
 954:	11 92       	st	Z+, r1
 956:	cb 01       	movw	r24, r22
 958:	0c 94 ae 04 	jmp	0x95c	; 0x95c <strrev>

0000095c <strrev>:
 95c:	dc 01       	movw	r26, r24
 95e:	fc 01       	movw	r30, r24
 960:	67 2f       	mov	r22, r23
 962:	71 91       	ld	r23, Z+
 964:	77 23       	and	r23, r23
 966:	e1 f7       	brne	.-8      	; 0x960 <strrev+0x4>
 968:	32 97       	sbiw	r30, 0x02	; 2
 96a:	04 c0       	rjmp	.+8      	; 0x974 <strrev+0x18>
 96c:	7c 91       	ld	r23, X
 96e:	6d 93       	st	X+, r22
 970:	70 83       	st	Z, r23
 972:	62 91       	ld	r22, -Z
 974:	ae 17       	cp	r26, r30
 976:	bf 07       	cpc	r27, r31
 978:	c8 f3       	brcs	.-14     	; 0x96c <strrev+0x10>
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
